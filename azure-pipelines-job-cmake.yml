# Azure Pipelines job template for CMake builds
# Version 0.2.0
# Author: Moritz Beutel
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Supported compiler versions:
#
# Windows:
#   MSVC: 19_1, 19_2
#   Clang: 9
#   NVCC: 10_1, 10_2
#
# Linux:
#   GCC: 5, 6, 7, 8, 9
#   Clang: 4, 5, 6, 7, 8, 9
#   NVCC: 10_1, 10_2
#
# MacOS:
#   GCC: 5, 6, 7, 8, 9
#   AppleClang: 8_1, 9, 9_1, 10, 10_0_1, 11


parameters:

  # Cache the directory '$(Build.BinariesDirectory)/dependencies'
  cache: True
  tag: ''

  # Platform options
  os: ''
  #platforms: [] # currently unavailable

  # C++ options
  cxxCompiler: ''
  #cxxCompilerVersions: [] # currently unavailable

  # CUDA options
  cudaCompiler: ''
  cudaCompilerVersion: ''
  cudaPackages: [] # cf. https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#install-cuda-software for Windows, https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ for Linux

  # Vcpkg repository
  vcpkgRepo: ''
  vcpkgRef: ''

  # Repository with additional port and triplet overlays
  vcpkgOverlayRepo: ''
  vcpkgOverlayRef: ''

  # Vcpkg options
  vcpkgTriplet: '<platform>-<os>'
  vcpkgArgs: ''
  vcpkgPackages: []

  # Build options
  cmakeListsTxtPath: '$(Build.SourcesDirectory)/CMakeLists.txt'
  cmakeBuildConfigurations: [Debug, RelWithDebInfo]
  cmakeGenerator: 'Ninja'
  cmakeConfigArgs: ''
  cmakeBuildArgs: ''
  cmakeTestArgs: ''

  targets: []
#    target.cache                     # overrides parameters.cache
#    target.tag                       # overrides parameters.tag
#    target.os: ''                    # overrides parameters.os
#    target.platforms: []             # overrides parameters.platforms
#    target.cxxCompiler               # overrides parameters.cxxCompiler
#    target.cxxCompilerVersions       # overrides parameters.cxxCompilerVersions
#    target.cudaCompiler              # overrides parameters.cudaCompiler
#    target.cudaCompilerVersion       # overrides parameters.cudaCompilerVersion
#    target.cmakeBuildConfigurations  # overrides parameters.cmakeBuildConfigurations
#    target.vcpkgRepo                 # overrides parameters.vcpkgRepo
#    target.vcpkgRef                  # overrides parameters.vcpkgRef
#    target.vcpkgOverlayRepo          # overrides parameters.vcpkgOverlayRepo
#    target.vcpkgOverlayRef           # overrides parameters.vcpkgOverlayRef
#    target.vcpkgTriplet              # overrides parameters.vcpkgTriplet
#    target.vcpkgArgs                 # overrides parameters.vcpkgArgs; can refer to parameters.vcpkgArgs as '<vcpkgArgs>'
#    target.vcpkgPackages             # overrides parameters.vcpkgPackages; can refer to parameters.vcpkgPackages as '<vcpkgPackages>'
#    target.cudaPackages              # overrides parameters.cudaPackages; can refer to parameters.cudaPackages as '<cudaPackages>'
#    target.cmakeGenerator            # overrides parameters.cmakeGenerator
#    target.cmakeConfigArgs           # overrides parameters.cmakeConfigArgs; can refer to parameters.cmakeConfigArgs as '<cmakeConfigArgs>'
#    target.cmakeBuildArgs            # overrides parameters.cmakeBuildArgs; can refer to parameters.cmakeBuildArgs as '<cmakeBuildArgs>'
#    target.cmakeTestArgs             # overrides parameters.cmakeTestArgs; can refer to parameters.cmakeTestArgs as '<cmakeTestArgs>'

jobs:
- ${{ each target in parameters.targets }}:
  #- ${{ each platform in coalesce(target.platforms, parameters.platforms) }}:
  - ${{ each platform in target.platforms }}:
    #- ${{ each cxxCompilerVersion in coalesce(target.cxxCompilerVersions, parameters.cxxCompilerVersions) }}:
    - ${{ each cxxCompilerVersion in target.cxxCompilerVersions }}:
      - job: '${{ coalesce(target.os, parameters.os) }}_${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}${{ cxxCompilerVersion }}_${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}_${{ coalesce(target.tag, parameters.tag) }}_${{ platform }}'
        pool:
          name: Azure Pipelines
          ${{ if and(eq(coalesce(target.os, parameters.os), 'Windows'), or(and(eq(coalesce(target.cxxCompiler, parameters.cxxCompiler), 'Clang'), le(9, cxxCompilerVersion)), and(eq(coalesce(target.cxxCompiler, parameters.cxxCompiler), 'MSVC'), or(eq(cxxCompilerVersion, '19_2'), eq(cxxCompilerVersion, '2019'))))) }}:
            vmImage: 'windows-2019'
          ${{ if and(eq(coalesce(target.os, parameters.os), 'Windows'), or(eq(cxxCompilerVersion, '19_1'), eq(cxxCompilerVersion, '2017'))) }}:
            vmImage: 'vs2017-win2016'
          ${{ if and(eq(coalesce(target.os, parameters.os), 'Windows'), or(eq(cxxCompilerVersion, '19'), eq(cxxCompilerVersion, '2015'), eq(cxxCompilerVersion, '18'), eq(cxxCompilerVersion, '2013'), eq(cxxCompilerVersion, '17'), eq(cxxCompilerVersion, '2012'), eq(cxxCompilerVersion, '16'), eq(cxxCompilerVersion, '2010'))) }}:
            vmImage: 'vs2015-win2012r2'
          ${{ if eq(coalesce(target.os, parameters.os), 'Linux') }}:
            vmImage: 'ubuntu-18.04'
          ${{ if and(eq(coalesce(target.os, parameters.os), 'MacOS'), or(eq(coalesce(target.cxxCompiler, parameters.cxxCompiler), 'GCC'), and(ne(cxxCompilerVersion, '9'), ne(cxxCompilerVersion, '8_1')))) }}:
            vmImage: 'macOS-10.14'
          ${{ if and(eq(coalesce(target.os, parameters.os), 'MacOS'), eq(coalesce(target.cxxCompiler, parameters.cxxCompiler), 'AppleClang'), or(eq(cxxCompilerVersion, '9'), eq(cxxCompilerVersion, '8_1'))) }}:
            vmImage: 'macOS-10.13'

        steps:
        - ${{ if and(eq(coalesce(target.os, parameters.os), 'Windows'), or(eq(cxxCompilerVersion, '19'), eq(cxxCompilerVersion, '2015'), eq(cxxCompilerVersion, '18'), eq(cxxCompilerVersion, '2013'), eq(cxxCompilerVersion, '17'), eq(cxxCompilerVersion, '2012'), eq(cxxCompilerVersion, '16'), eq(cxxCompilerVersion, '2010'))) }}:
          # This image doesn't come with pwsh; bootstrap PS Core before continuing.
          - powershell: |
              Invoke-WebRequest https://github.com/PowerShell/PowerShell/releases/download/v6.2.3/PowerShell-6.2.3-win-x64.zip -OutFile PowerShell-win-x64.zip
              New-Item -Type Directory -Force '$(Build.BinariesDirectory)/tools/pwsh'
              Expand-Archive -Path PowerShell-win-x64.zip -DestinationPath '$(Build.BinariesDirectory)/tools/pwsh'
              echo "##vso[task.setvariable variable=PATH];$(Build.BinariesDirectory)/tools/pwsh;${env:PATH}"
              if ('${{ cxxCompilerVersion }}' -ne '18' -and '${{ cxxCompilerVersion }}' -ne '2013' -and '${{ cxxCompilerVersion }}' -ne '17' -and '${{ cxxCompilerVersion }}' -ne '2012' -and '${{ cxxCompilerVersion }}' -ne '16' -and '${{ cxxCompilerVersion }}' -ne '2010') {
                  echo "##vso[task.setvariable variable=CIMAKESHIFT_NO_VCPKG_]1"
              }
            displayName: Bootstrap PowerShell Core

        - pwsh: |
            Write-Host 'Cache: ${{ or(eq(target.cache, True), parameters.cache) }}'
            if ('${{ or(eq(target.cache, True), parameters.cache) }}' -eq 'True') {
            #    New-Item -Type Directory -Force '$(Build.BinariesDirectory)/dependencies'
            }

            $revision='1' # Update this when making incompatible changes to the build pipeline definition.
            if ($IsWindows) { $tripletOS = 'windows' }
            elseif ($IsLinux) { $tripletOS = 'linux' }
            elseif ($IsMacOS) { $tripletOS = 'osx' }
            $cxxCompilerVersion = '${{ cxxCompilerVersion }}'
            $vcpkgTriplet = '${{ coalesce(target.vcpkgTriplet, parameters.vcpkgTriplet) }}' -replace '<os>',$tripletOS -replace '<platform>','${{ platform }}'
            $cudaPackagesRaw = ('${{ join(' ', coalesce(target.cudaPackages, parameters.cudaPackages)) }}' -replace '<cudaPackages>','${{ join(' ', parameters.cudaPackages) }}' -replace '\s+',' ').Trim() + ' '
            $cmakeGenerator = '${{ coalesce(target.cmakeGenerator, parameters.cmakeGenerator) }}'
            if ($IsWindows) {
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'MSVC') {
                    $msvcOrVSVersion_msvcVersion = @{
                        '16'   = '16'
                        '2010' = '16'
                        '17'   = '17'
                        '2012' = '17'
                        '18'   = '18'
                        '2013' = '18'
                        '19'   = '19'
                        '2015' = '19'
                        '19_1' = '19_1'
                        '2017' = '19_1'
                        '19_2' = '19_2'
                        '2019' = '19_2'
                    }
                    $cxxCompilerVersion = $msvcOrVSVersion_msvcVersion[$cxxCompilerVersion]
                    $msvcVersion_msbuildGenerator = @{
                        '16'   = 'Visual Studio 10 2010'
                        '17'   = 'Visual Studio 11 2012'
                        '18'   = 'Visual Studio 12 2013'
                        '19'   = 'Visual Studio 14 2015'
                        '19_1' = 'Visual Studio 15 2017'
                        '19_2' = 'Visual Studio 16 2019'
                    }
                    $cmakeGenerator = $cmakeGenerator -replace 'MSBuild',$msvcVersion_msbuildGenerator[$cxxCompilerVersion]
                }
                elseif ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'Clang') {
                    #$vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                    #$clangClPath = Join-Path $vsPath 'VC\Tools\Llvm\bin\clang-cl.exe'
                    $llvmRoot = "${env:ProgramFiles}\LLVM\bin"
                    echo "##vso[task.setvariable variable=PATH]$llvmRoot;${env:PATH}"
                    $clangClPath = "$llvmRoot\clang-cl.exe"
                    $clangClCompatPath = $clangClPath -replace '\\','/'
                    $cmakeGenerator = $cmakeGenerator -replace 'MSBuild','Visual Studio 16 2019'
                    $cmakeCompilerFlag = "-DCMAKE_C_COMPILER=`"$clangClCompatPath`" -DCMAKE_CXX_COMPILER=`"$clangClCompatPath`""
                    if ('${{ platform }}' -eq 'x86') {
                        # Workaround for https://gitlab.kitware.com/cmake/cmake/issues/16259
                        echo '##vso[task.setvariable variable=CFLAGS]-m32'
                        echo '##vso[task.setvariable variable=CXXFLAGS]-m32'
                    }
                }
                if('${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}') {
                    $cudaVersionRaw = '${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}'
                    $cudaVersion = $cudaVersionRaw -replace '_','.'
                    $cudaPath = "$env:SystemDrive/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v$cudaVersion"
                    $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"$cudaPath/bin/nvcc.exe`""
                    $cudaPackages = ("nvcc $cudaPackagesRaw" -replace '\s+',' ' -replace ' ',"_$cudaVersion ").Trim()
                    echo "##vso[task.setvariable variable=CUDA_PATH]$cudaPath"
                    echo "##vso[task.setvariable variable=CUDA_PATH_V$cudaVersionRaw]$cudaPath"
                }
                #echo "##vso[task.setvariable variable=Path]$(Build.BinariesDirectory)/dependencies/cmake/bin;${env:Path}"
            }
            elseif ($IsLinux) {
                New-Item -Type Directory -Force "$HOME/bin"
                echo "##vso[task.setvariable variable=PATH]$HOME/bin:${env:PATH}"
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'GCC') {
                    echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                    echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                }
                elseif ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'Clang') {
                    $clangVersion_clangFullVersion = @{
                        '4' = '4.0'
                        '5' = '5.0'
                        '6' = '6.0'
                        '7' = '7'
                        '8' = '8'
                        '9' = '9'
                    }
                    $clangFullVersion = $clangVersion_clangFullVersion[$cxxCompilerVersion]
                    echo "##vso[task.setvariable variable=CC]clang-$clangFullVersion"
                    echo "##vso[task.setvariable variable=CXX]clang++-$clangFullVersion"
                }
                if('${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}') {
                    $cudaVersion = '${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}' -replace '_','.'
                    $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"/usr/local/cuda-$cudaVersion/bin/nvcc`""
                    $cudaVersion_Dash = $cudaVersion -replace '\.','-'
                    $cudaPackages = ("cuda-core cuda-cudart-dev $cudaPackagesRaw" -replace '\s+',' ' -replace ' ',"-$cudaVersion_Dash ").Trim()
                }
            }
            elseif ($IsMacOS) {
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'GCC') {
                    echo "##vso[task.setvariable variable=CXXFLAGS_OLD]$env:CXXFLAGS"
                    echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
                    echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                    echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                }
            }
            $vcpkgRepo = '${{ coalesce(target.vcpkgRepo, parameters.vcpkgRepo) }}'
            if ($vcpkgRepo -eq '' -and '${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}') {
                $vcpkgRepo = 'https://github.com/microsoft/vcpkg.git'
            }
            $vcpkgArgs = '${{ coalesce(target.vcpkgArgs, parameters.vcpkgArgs) }}' -replace '<vcpkgArgs>','${{ parameters.vcpkgArgs }}'
            $vcpkgPackages = '${{ join(' ', coalesce(target.vcpkgPackages, parameters.vcpkgPackages)) }}' -replace '<vcpkgPackages>','${{ join(' ', parameters.vcpkgPackages) }}'
            $cacheKey = @(
                "revision-$revision",
                '${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' + $cxxCompilerVersion,
                '${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}',
                $vcpkgTriplet,
                "$vcpkgRepo" + '${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}',
                '${{ coalesce(target.vcpkgOverlayRepo, parameters.vcpkgOverlayRepo) }}${{ coalesce(target.vcpkgOverlayRef, parameters.vcpkgOverlayRef) }}',
                $vcpkgArgs,
                $vcpkgPackages,
                '${{ coalesce(target.tag, parameters.tag) }}'
            ) -join ' '
            $cmakeConfigArgs = '${{ coalesce(target.cmakeConfigArgs, parameters.cmakeConfigArgs) }}' -replace '<cmakeConfigArgs>','${{ parameters.cmakeConfigArgs }}'
            $cmakeBuildArgs = '${{ coalesce(target.cmakeBuildArgs, parameters.cmakeBuildArgs) }}' -replace '<cmakeBuildArgs>','${{ parameters.cmakeBuildArgs }}'
            $cmakeTestArgs = '${{ coalesce(target.cmakeTestArgs, parameters.cmakeTestArgs) }}' -replace '<cmakeTestArgs>','${{ parameters.cmakeTestArgs }}'

            # public variables accessible to custom job steps
            echo '##vso[task.setvariable variable=CIMAKESHIFT_CACHE]${{ coalesce(target.cache, parameters.cache) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_TAG]${{ coalesce(target.tag, parameters.tag) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_OS]${{ coalesce(target.os, parameters.os) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_PLATFORM]${{ platform }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER]${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}'
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER_VERSION]$cxxCompilerVersion"
            echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER]${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER_VERSION]${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}'
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CUDA_PACKAGES]$cudaPackages"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REPO]$vcpkgRepo"
            echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REF]${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REPO]${{ coalesce(target.vcpkgOverlayRepo, parameters.vcpkgOverlayRepo) }}'
            echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REF]${{ coalesce(target.vcpkgOverlayRef, parameters.vcpkgOverlayRef) }}'
            echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_ARGS]$vcpkgArgs"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_PACKAGES]$vcpkgPackages"
            echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATIONS]${{ join(target.cmakeBuildConfigurations, ';') }}'
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_GENERATOR]$cmakeGenerator"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_CONFIG_ARGS]$cmakeCompilerFlag $cmakeCudaCompilerFlag $cmakeConfigArgs"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_ARGS]$cmakeBuildArgs"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_TEST_ARGS]$cmakeTestArgs"
            echo '##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/dependencies/vcpkg'
            echo "##vso[task.setvariable variable=VCPKG_TRIPLET]$vcpkgTriplet"

            # private variables
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CACHE_KEY_]$cacheKey"
            echo "##vso[task.setvariable variable=CIMAKESHIFT_CLANG_FULL_VERSION_]$clangFullVersion"
          displayName: Set environment variables

        - ${{ if coalesce(target.cache, parameters.cache) }}:
          - task: Cache@2
            displayName: Cache dependencies
            inputs:
              key: '"$(CIMAKESHIFT_CACHE_KEY_)"'
              path: '$(Build.BinariesDirectory)/dependencies'
              cacheHitVar: 'dependencyCacheHit'

        - pwsh: |
            If ('${{ parameters.debug }}' -eq 'True') {
                Get-ChildItem env: | Format-List
            }
            if ($IsWindows) {
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'Clang') {
                    $clangVersion = "$env:CIMAKESHIFT_CXX_COMPILER_VERSION.0.0"
                    Invoke-WebRequest http://releases.llvm.org/$clangVersion/LLVM-${clangVersion}-win64.exe -OutFile "$HOME/LLVM-installer.exe"
                    Start-Process -Wait "$HOME/LLVM-installer.exe" '/S'
                }
                if ('${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}') {
                    $cudaVersion = '${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}' -replace '_','.'
                    $cudaVersion_URL = @{
                        '10.1' = 'http://developer.download.nvidia.com/compute/cuda/10.1/Prod/network_installers/cuda_10.1.105_win10_network.exe'
                        '10.2' = 'http://developer.download.nvidia.com/compute/cuda/10.2/Prod/network_installers/cuda_10.2.89_win10_network.exe'
                    }
                    Invoke-WebRequest $cudaVersion_URL[$cudaVersion] -OutFile "$HOME/cuda_installer_network.exe"
                    Write-Host "[CImakeshift] Installing CUDA packages $env:CIMAKESHIFT_CUDA_PACKAGES"
                    Start-Process -Wait "$HOME/cuda_installer_network.exe" (@('-s') + ($env:CIMAKESHIFT_CUDA_PACKAGES -split ' '))
                }
            }
            elseif ($IsLinux) {
                $packages = @('cmake')
                Invoke-WebRequest -OutFile "$HOME/kitware-archive-latest.asc" https://apt.kitware.com/keys/kitware-archive-latest.asc
                & sudo apt-key add "$HOME/kitware-archive-latest.asc"
                & sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'GCC') {
                    & sudo apt-add-repository ppa:ubuntu-toolchain-r/test
                    $packages += ("gcc-$env:CIMAKESHIFT_CXX_COMPILER_VERSION", "g++-$env:CIMAKESHIFT_CXX_COMPILER_VERSION")
                }
                elseif ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'Clang') {
                    $clangVersion_Repository = @{
                        '4' = ''
                        '5' = 'llvm-toolchain-bionic-5.0'
                        '6' = 'llvm-toolchain-bionic-6.0'
                        '7' = 'llvm-toolchain-bionic-7'
                        '8' = 'llvm-toolchain-bionic-8'
                        '9' = 'llvm-toolchain-bionic-9'
                    }
                    $clangRepository = $clangVersion_Repository[$env:CIMAKESHIFT_CXX_COMPILER_VERSION]
                    if ($clangRepository) {
                        & sudo apt-add-repository "deb http://apt.llvm.org/bionic/ $clangRepository main"
                    }
                    $packages += "clang-$env:CIMAKESHIFT_CLANG_FULL_VERSION_"
                }
                if ('${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}') {
                    $cudaVersion = '${{ coalesce(target.cudaCompilerVersion, parameters.cudaCompilerVersion) }}' -replace '_','.'
                    $ubuntuVersion = 'ubuntu1804'
                    $cudaVersion_installer = @{
                        '10.1' = "cuda-repo-${ubuntuVersion}_10.1.105-1_amd64.deb"
                        '10.2' = "cuda-repo-${ubuntuVersion}_10.2.89-1_amd64.deb"
                    }
                    $installer = $cudaVersion_installer[$cudaVersion]
                    Invoke-WebRequest https://developer.download.nvidia.com/compute/cuda/repos/$ubuntuVersion/x86_64/7fa2af80.pub -OutFile 7fa2af80.pub
                    & sudo apt-key add 7fa2af80.pub
                    Invoke-WebRequest http://developer.download.nvidia.com/compute/cuda/repos/$ubuntuVersion/x86_64/$installer -OutFile $installer
                    & sudo dpkg -i $installer
                    $packages += $env:CIMAKESHIFT_CUDA_PACKAGES -split ' '
                }
                & sudo apt-get update
                Write-Host "[CImakeshift] Installing packages $packages"
                & sudo apt-get install $packages
                & ln -s /usr/bin/cmake $HOME/bin/cmake
                & ln -s /usr/bin/ctest $HOME/bin/ctest
            }
            elseif ($IsMacOS) {
                & sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'GCC') {
                    & brew install gcc@$env:CIMAKESHIFT_CXX_COMPILER_VERSION
                }
                if ('${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}') {
                    & brew install gcc@9
                }
            }
          displayName: Install tools

        - ${{ if and(coalesce(target.vcpkgRef, parameters.vcpkgRef), coalesce(target.vcpkgOverlayRepo, parameters.vcpkgOverlayRepo), coalesce(target.vcpkgOverlayRef, parameters.vcpkgOverlayRef)) }}:
          - pwsh: |
              & git clone ${{ coalesce(target.vcpkgOverlayRepo, parameters.vcpkgOverlayRepo) }} '$(Build.BinariesDirectory)/dependencies/overlay-repo'
              cd '$(Build.BinariesDirectory)/dependencies/overlay-repo'
              & git checkout --quiet --force ${{ coalesce(target.vcpkgOverlayRef, parameters.vcpkgOverlayRef) }}
              New-Item -Type Directory -Force '$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports'
              New-Item -Type Directory -Force '$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_ARGS]--overlay-ports="$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/ports" --overlay-triplets="$(Build.BinariesDirectory)/dependencies/overlay-repo/vcpkg/triplets"'
            displayName: Clone Vcpkg overlay repository
            condition: and(ne(variables.dependencyCacheHit, 'true'), ne('${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}', ''), ne(variables.CIMAKESHIFT_VCPKG_PACKAGES, ''), eq(variables.CIMAKESHIFT_NO_VCPKG_, ''))

        - ${{ if coalesce(target.vcpkgRef, parameters.vcpkgRef) }}:
          - task: run-vcpkg@0
            displayName: Run Vcpkg to install dependencies
            inputs:
              vcpkgDirectory: '$(Build.BinariesDirectory)/dependencies/vcpkg'
              vcpkgGitURL: '$(CIMAKESHIFT_VCPKG_REPO)'
              vcpkgGitCommitId: '${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}'
              vcpkgTriplet: '$(VCPKG_TRIPLET)'
              vcpkgArguments: '$(CIMAKESHIFT_VCPKG_OVERLAY_ARGS) $(CIMAKESHIFT_VCPKG_ARGS) $(CIMAKESHIFT_VCPKG_PACKAGES)'
            condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.CIMAKESHIFT_VCPKG_PACKAGES, ''), eq(variables.CIMAKESHIFT_NO_VCPKG_, ''))

        - ${{ each step in parameters.postSetupSteps }}:
          - ${{ each pair in step }}:
              ${{ pair.key }}: ${{ pair.value }}
        - ${{ if target.postSetupSteps }}:
          - ${{ each step in target.postSetupSteps }}:
            - ${{ each pair in step }}:
                ${{ pair.key }}: ${{ pair.value }}

        - ${{ if coalesce(target.vcpkgRef, parameters.vcpkgRef) }}:
          - pwsh: |
              Remove-Item -Recurse -Force '$(Build.BinariesDirectory)/dependencies/vcpkg/buildtrees'
              Remove-Item -Recurse -Force '$(Build.BinariesDirectory)/dependencies/vcpkg/downloads'
              Remove-Item -Recurse -Force '$(Build.BinariesDirectory)/dependencies/vcpkg/packages'
            displayName: Delete temporary files
            condition: and(ne(variables.dependencyCacheHit, 'true'), ne(variables.CIMAKESHIFT_VCPKG_PACKAGES, ''), eq(variables.CIMAKESHIFT_NO_VCPKG_, ''))

        - pwsh: |
            If ('${{ parameters.debug }}' -eq 'True') {
                Get-ChildItem env: | Format-List # for debugging
            }
            if ($IsWindows) {
                 if ('${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}' -eq '' -or "$env:CIMAKESHIFT_VCPKG_PACKAGES" -eq '' -or "$env:CIMAKESHIFT_NO_VCPKG_" -eq '') {
                    # If Vcpkg isn't being used, we need to set the correct environment manually.
                    # Cf. https://help.appveyor.com/discussions/questions/18777-how-to-use-vcvars64bat-from-powershell
                    if ($env:CIMAKESHIFT_CXX_COMPILER_VERSION -lt 19) {
                        #$platform_vcvarsPlatform = @{
                        #    'x86': ''
                        #    'x64': 'amd64'
                        #}
                        #$vcvarsPlatform = $platform_vcvarsPlatform['${{ platform }}']
                        #$vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -legacy -latest -version '[10.0,15.0)' -property installationPath
                        #$vcvarsPath = "$vsPath\VC\vcvarsall.bat"
                        #& cmd.exe /c call `"$vcvarsPath`" $vcvarsPlatform && set > %temp%\vcvars.txt"
                        # TODO
                    }
                    else {
                        if ($env:CIMAKESHIFT_CXX_COMPILER_VERSION -eq '19') {
                            $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -legacy -latest -property installationPath
                            $vcvarsPath = "$vsPath\VC\vcvarsall.bat"
                            & cmd.exe /c "call `"C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd`" /${{ platform }} && call `"$vcvarsPath`" && set > %temp%\vcvars.txt"
                        }
                        else {
                            # assume VS 2017 or newer
                            $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                            $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvarsall.bat"
                            & cmd.exe /c "call `"$vcvarsPath`" ${{ platform }} && set > %temp%\vcvars.txt"
                        }
                        Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
                            if ($_ -match '^(.*?)=(.*)$') {
                                echo "##vso[task.setvariable variable=$($matches[1])]$($matches[2])"
                            }
                        }
                    }
                    if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'MSVC') {
                        echo "##vso[task.setvariable variable=CC]cl.exe"
                        echo "##vso[task.setvariable variable=CXX]cl.exe"
                    }
                 }
            }
            if ($IsMacOS) {
                if ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'GCC') {
                    echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS_OLD"
                    echo "##vso[task.setvariable variable=CC]gcc-$env:CIMAKESHIFT_CXX_COMPILER_VERSION"
                    echo "##vso[task.setvariable variable=CXX]g++-$env:CIMAKESHIFT_CXX_COMPILER_VERSION"
                }
                elseif ('${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}' -eq 'AppleClang') {
                    $appleClangVersion_xcodeVersion = @{
                        '8_1'    = '8.3.3'
                        '9'      = '9.2'   # also 9.1, 9.0.1, 9.0
                        '9_1'    = '9.4.1'
                        '10'     = '10.1'  # also 10
                        '10_0_1' = '10.3'  # also 10.2, 10.2.1
                        '11'     = '11.3'  # also 11.1, 11.2, 11.2.1
                    }
                    $xcodeVersion = $appleClangVersion_xcodeVersion[$env:CIMAKESHIFT_CXX_COMPILER_VERSION]
                    & sudo xcode-select -s /Applications/Xcode_$xcodeVersion.app/Contents/Developer
                    echo '##vso[task.setvariable variable=CC]clang'
                    echo '##vso[task.setvariable variable=CXX]clang++'
                }
            }
          displayName: Set environment variables

        - ${{ if not(target.cmakeBuildConfigurations) }}:
          - ${{ each config in parameters.cmakeBuildConfigurations }}:

            - ${{ if coalesce(parameters.preBuildSteps, target.preBuildSteps, parameters.postBuildSteps, target.postBuildSteps) }}:
              - pwsh: |
                  echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATION]${{ config }}'
                displayName: Set environment variables for build configuration

            - ${{ each step in parameters.preBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if target.preBuildSteps }}:
              - ${{ each step in target.preBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

            - task: run-cmake@0
              displayName: 'Build ${{ config }}'
              inputs:
                cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
                cmakeListsTxtPath: '${{ parameters.cmakeListsTxtPath }}'
                useVcpkgToolchainFile: true
                buildDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'
                cmakeAppendedArgs: '-G "$(CIMAKESHIFT_CMAKE_GENERATOR)" $(CIMAKESHIFT_CMAKE_CONFIG_ARGS) -DCMAKE_BUILD_TYPE=${{ config }}'
                buildWithCMakeArgs: '--parallel --verbose --config ${{ config }} $(CIMAKESHIFT_CMAKE_BUILD_ARGS)'

            - pwsh: |
                $ctestArglist = $env:CIMAKESHIFT_CMAKE_TEST_ARGS -split ' '
                & ctest --verbose --test-action Test --build-config ${{ config }} $ctestArglist
              displayName: 'Run tests for ${{ config }}'
              workingDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'

            - ${{ each step in parameters.postBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if target.postBuildSteps }}:
              - ${{ each step in target.postBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

        - ${{ if target.cmakeBuildConfigurations }}:
          - ${{ each config in target.cmakeBuildConfigurations }}:

            - ${{ if coalesce(parameters.preBuildSteps, target.preBuildSteps, parameters.postBuildSteps, target.postBuildSteps) }}:
            - task:
              - pwsh: |
                  echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATION]${{ config }}'
                displayName: Set environment variables for build configuration

            - ${{ each step in parameters.preBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if target.preBuildSteps }}:
              - ${{ each step in target.preBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

            - task: run-cmake@0
              displayName: 'Build ${{ config }}'
              inputs:
                cmakeListsOrSettingsJson: 'CMakeListsTxtAdvanced'
                cmakeListsTxtPath: '${{ parameters.cmakeListsTxtPath }}'
                useVcpkgToolchainFile: true
                buildDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'
                cmakeAppendedArgs: '-G "$(CIMAKESHIFT_CMAKE_GENERATOR)" $(CIMAKESHIFT_CMAKE_CONFIG_ARGS) -DCMAKE_BUILD_TYPE=${{ config }}'
                buildWithCMakeArgs: '--parallel --verbose --config ${{ config }} $(CIMAKESHIFT_CMAKE_BUILD_ARGS)'

            - pwsh: |
                $ctestArglist = $env:CIMAKESHIFT_CMAKE_TEST_ARGS -split ' '
                & ctest --verbose --test-action Test --build-config ${{ config }} $ctestArglist
              displayName: 'Run tests for ${{ config }}'
              workingDirectory: '$(Build.BinariesDirectory)/build/${{ config }}'

            - ${{ each step in parameters.postBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if target.postBuildSteps }}:
              - ${{ each step in target.postBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

        - task: PublishTestResults@2
          displayName: Publish test results
          inputs:
            testResultsFormat: 'cTest'
            testResultsFiles: '$(Build.BinariesDirectory)/build/*/Testing/*/Test.xml'
            testRunTitle: '$(Agent.JobName)'
