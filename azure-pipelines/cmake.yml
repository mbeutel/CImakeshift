# Azure Pipelines job template for CMake builds
# Version 0.4.0
# Author: Moritz Beutel
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Supported compiler versions:
#
# Windows:
#   MSVC:               19_1, 19_2
#                       (also known as 2017, 2019)
#   Clang:              10, 11
#   NVCC:               11_0, 11_1, 11_2
#
# Linux:
#   GCC:                5, 6, 7, 8, 9, 10
#   Clang:              4, 5, 6, 7, 8, 9, 10, 11
#   NVCC:               11_0, 11_1, 11_2
#
# MacOS:
#   GCC:                5, 6, 7, 8, 9, 10
#   AppleClang:         9_1, 10, 10_0_1, 11, 11_0_3, 12_0_0


# Useful CUDA packages:
#
#   cublas-dev      cuBLAS headers and libraries
#   cufft-dev       cuFFT headers and libraries
#   curand-dev      cuRAND headers and libraries
#   cusolver-dev    cuSOLVER headers and libraries
#   cusparse-dev    cuSPARSE headers and libraries
#   nvgraph-dev     nvGRAPH headers and libraries
#   npp-dev         NPP headers and libraries
#   nvrtc-dev       NVRTC headers and libraries
#
# (cf. https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html#install-cuda-software for Windows,
# https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/ for Linux)


parameters:

  # Caption and tag for identification of the job
  caption: ''
  tag: ''

  # Platform options
  os: ''
  platforms: []

  # C++ options
  cxxCompiler: ''
  cxxCompilerVersions: []

  # CUDA options
  cudaCompiler: ''
  cudaCompilerVersions: [None]
  cudaPackages: []

  # Vcpkg repository
  vcpkgRepo: ''
  vcpkgRef: ''

  # Repository with additional port and triplet overlays
  vcpkgOverlayRepo: ''
  vcpkgOverlayRef: ''

  # Vcpkg options
  vcpkgTriplet: '<platform>-<os>'
  vcpkgArgs: ''
  vcpkgPackages: []
  vcpkgCache: '' # on by default if Vcpkg is used
  vcpkgCacheKey: ''

  # Build options
  cmakeSourceDir: '$(Build.SourcesDirectory)'
  cmakeBuildConfigurations: [Debug, RelWithDebInfo]
  cmakeGenerator: ''
  cmakeConfig: true
  cmakeConfigArgs: ''
  cmakeBuild: true
  cmakeBuildArgs: ''
  cmakeTest: true
  cmakeTestArgs: ''

  # Build events
  postSetupSteps: []
  preBuildSteps: []
  postBuildSteps: []

  targets: []
#    target.caption                   # overrides parameters.caption
#    target.tag                       # overrides parameters.tag
#    target.os                        # overrides parameters.os
#    target.platforms                 # overrides parameters.platforms
#    target.cxxCompiler               # overrides parameters.cxxCompiler
#    target.cxxCompilerVersions       # overrides parameters.cxxCompilerVersions
#    target.cudaCompiler              # overrides parameters.cudaCompiler
#    target.cudaCompilerVersions      # overrides parameters.cudaCompilerVersions
#    target.cmakeBuildConfigurations  # overrides parameters.cmakeBuildConfigurations
#    target.vcpkgRepo                 # overrides parameters.vcpkgRepo
#    target.vcpkgRef                  # overrides parameters.vcpkgRef
#    target.vcpkgOverlayRepo          # overrides parameters.vcpkgOverlayRepo
#    target.vcpkgOverlayRef           # overrides parameters.vcpkgOverlayRef
#    target.vcpkgTriplet              # overrides parameters.vcpkgTriplet
#    target.vcpkgArgs                 # overrides parameters.vcpkgArgs; can refer to parameters.vcpkgArgs as '<vcpkgArgs>'
#    target.vcpkgPackages             # overrides parameters.vcpkgPackages; can refer to parameters.vcpkgPackages as '<vcpkgPackages>'
#    target.vcpkgCache                # overrides parameters.vcpkgCache
#    target.vcpkgCacheKey             # overrides parameters.vcpkgCacheKey; can refer to parameters.vcpkgCacheKey as '<vcpkgCacheKey>'
#    target.cudaPackages              # overrides parameters.cudaPackages; can refer to parameters.cudaPackages as '<cudaPackages>'
#    target.cmakeGenerator            # overrides parameters.cmakeGenerator
#    target.cmakeConfig               # overrides parameters.cmakeConfig
#    target.cmakeConfigArgs           # overrides parameters.cmakeConfigArgs; can refer to parameters.cmakeConfigArgs as '<cmakeConfigArgs>'
#    target.cmakeBuild                # overrides parameters.cmakeBuild
#    target.cmakeBuildArgs            # overrides parameters.cmakeBuildArgs; can refer to parameters.cmakeBuildArgs as '<cmakeBuildArgs>'
#    target.cmakeTest                 # overrides parameters.cmakeTest
#    target.cmakeTestArgs             # overrides parameters.cmakeTestArgs; can refer to parameters.cmakeTestArgs as '<cmakeTestArgs>'
#    target.postSetupSteps            # adds to parameters.postSetupSteps
#    target.preBuildSteps             # adds to parameters.preBuildSteps
#    target.postBuildSteps            # adds to parameters.postBuildSteps

jobs:
- ${{ each target in parameters.targets }}:
  - template: cmake_detail_job.yml
    parameters:
      cmakeSourceDir: '${{ parameters.cmakeSourceDir }}'
      postSetupSteps: ${{ parameters.postSetupSteps }}
      preBuildSteps: ${{ parameters.preBuildSteps }}
      postBuildSteps: ${{ parameters.postBuildSteps }}
      targetPostSetupSteps: ${{ target.postSetupSteps }}
      targetPreBuildSteps: ${{ target.preBuildSteps }}
      targetPostBuildSteps: ${{ target.postBuildSteps }}
      caption: '${{ coalesce(target.caption, parameters.caption) }}'
      tag: '${{ coalesce(target.tag, parameters.tag) }}'
      os: '${{ coalesce(target.os, parameters.os) }}'
      platforms:
      - ${{ if target.platforms }}:
        - ${{ target.platforms }}
      - ${{ if not(target.platforms) }}:
        - ${{ parameters.platforms }}
      cxxCompiler: '${{ coalesce(target.cxxCompiler, parameters.cxxCompiler) }}'
      cxxCompilerVersions:
      - ${{ if target.cxxCompilerVersions }}:
        - ${{ target.cxxCompilerVersions }}
      - ${{ if not(target.cxxCompilerVersions) }}:
        - ${{ parameters.cxxCompilerVersions }}
      cudaCompiler: '${{ coalesce(target.cudaCompiler, parameters.cudaCompiler) }}'
      cudaCompilerVersions:
      - ${{ if target.cudaCompilerVersions }}:
        - ${{ target.cudaCompilerVersions }}
      - ${{ if not(target.cudaCompilerVersions) }}:
        - ${{ parameters.cudaCompilerVersions }}
      vcpkgRepo: '${{ coalesce(target.vcpkgRepo, parameters.vcpkgRepo) }}'
      vcpkgRef: '${{ coalesce(target.vcpkgRef, parameters.vcpkgRef) }}'
      vcpkgOverlayRepo: '${{ coalesce(target.vcpkgOverlayRepo, parameters.vcpkgOverlayRepo) }}'
      vcpkgOverlayRef: '${{ coalesce(target.vcpkgOverlayRef, parameters.vcpkgOverlayRef) }}'
      vcpkgTriplet: '${{ coalesce(target.vcpkgTriplet, parameters.vcpkgTriplet) }}'
      vcpkgCache: '${{ coalesce(target.vcpkgCache, parameters.vcpkgCache) }}'
      vcpkgCacheKey: '${{ coalesce(target.vcpkgCacheKey, parameters.vcpkgCacheKey) }}'
      cmakeBuildConfigurations:
      - ${{ if target.cmakeBuildConfigurations }}:
        - ${{ target.cmakeBuildConfigurations }}
      - ${{ if not(target.cmakeBuildConfigurations) }}:
        - ${{ parameters.cmakeBuildConfigurations }}
      cmakeGenerator: '${{ coalesce(target.cmakeGenerator, parameters.cmakeGenerator) }}'
      cmakeConfig: '${{ coalesce(target.cmakeConfig, parameters.cmakeConfig) }}'
      cmakeBuild: '${{ coalesce(target.cmakeBuild, parameters.cmakeBuild) }}'
      cmakeTest: '${{ coalesce(target.cmakeTest, parameters.cmakeTest) }}'
      cudaPackages: '${{ replace(coalesce(join('' '', target.cudaPackages), ''<cudaPackages>''), ''<cudaPackages>'', join('' '', parameters.cudaPackages)) }}'
      vcpkgPackages: '${{ replace(coalesce(join('' '', target.vcpkgPackages), ''<vcpkgPackages>''), ''<vcpkgPackages>'', join('' '', parameters.vcpkgPackages)) }}'
      vcpkgArgs: '${{ replace(coalesce(target.vcpkgArgs, ''<vcpkgArgs>''), ''<vcpkgArgs>'', parameters.vcpkgArgs) }}'
      cmakeConfigArgs: '${{ replace(coalesce(target.cmakeConfigArgs, ''<cmakeConfigArgs>''), ''<cmakeConfigArgs>'', parameters.cmakeConfigArgs) }}'
      cmakeBuildArgs: '${{ replace(coalesce(target.cmakeBuildArgs, ''<cmakeBuildArgs>''), ''<cmakeBuildArgs>'', parameters.cmakeBuildArgs) }}'
      cmakeTestArgs: '${{ replace(coalesce(target.cmakeTestArgs, ''<cmakeTestArgs>''), ''<cmakeTestArgs>'', parameters.cmakeTestArgs) }}'
