# Internal template: declare jobs for target

parameters:

  # Passed-through parameters
  cmakeSourceDir: ''
  postSetupSteps: []
  preBuildSteps: []
  postBuildSteps: []
  targetPreBuildSteps: []
  targetPostBuildSteps: []

  # Coalesced parameters
  caption: ''
  tag: ''
  os: ''
  platforms: []
  cxxCompiler: ''
  cxxCompilerVersions: []
  cudaCompiler: ''
  cudaCompilerVersions: []
  vcpkgRepo: ''
  vcpkgRef: ''
  vcpkgOverlayRepo: ''
  vcpkgOverlayRef: ''
  vcpkgTriplet: ''
  vcpkgCache: ''
  vcpkgCacheKey: ''
  cmakeBuildConfigurations: []
  cmakeGenerator: ''
  cmakeConfig: true
  cmakeBuild: true
  cmakeTest: true

  # Augmented string parameters
  cudaPackages: ''
  vcpkgPackages: ''
  vcpkgArgs: ''
  cmakeConfigArgs: ''
  cmakeBuildArgs: ''
  cmakeTestArgs: ''


jobs:
- ${{ if and(parameters.platforms, parameters.cxxCompilerVersions, parameters.cudaCompilerVersions) }}:
  - ${{ each platform in parameters.platforms }}:
    - ${{ each cxxCompilerVersion in parameters.cxxCompilerVersions }}:
      - ${{ each cudaCompilerVersion in parameters.cudaCompilerVersions }}:
        - job: '${{ replace(replace(replace(format(''<_captionBegin_>{0}<_captionEnd_>'', replace(replace(parameters.caption, ''.'', ''_''), '' '', ''_'')), ''<_captionBegin_><_captionEnd_>'', ''''), ''<_captionBegin_>'', ''''), ''<_captionEnd_>'', ''_'') }}${{ parameters.os }}_${{ platform }}_${{ parameters.cxxCompiler }}${{ cxxCompilerVersion }}${{ replace(replace(format(''<_cudaCompiler_>{0}'', cudaCompilerVersion), ''<_cudaCompiler_>None'', ''''), ''<_cudaCompiler_>'', format(''_{0}'', parameters.cudaCompiler)) }}_${{ join(''_'', parameters.cmakeBuildConfigurations) }}${{ replace(replace(replace(format(''<_tagBegin_>{0}<_tagEnd_>'', replace(replace(parameters.tag, ''.'', ''_''), '' '', ''_'')), ''<_tagBegin_><_tagEnd_>'', ''''), ''<_tagBegin_>'', ''_''), ''<_tagEnd_>'', '''') }}'
          displayName: '${{ replace(replace(replace(format(''<_captionBegin_>{0}<_captionEnd_>'', parameters.caption), ''<_captionBegin_><_captionEnd_>'', ''''), ''<_captionBegin_>'', ''''), ''<_captionEnd_>'', '': '') }}${{ parameters.os }} ${{ platform }}, ${{ parameters.cxxCompiler }} ${{ replace(cxxCompilerVersion, ''_'', ''.'') }}${{ replace(replace(format(''<_cudaCompiler_>{0}'', replace(cudaCompilerVersion, ''_'', ''.'')), ''<_cudaCompiler_>None'', ''''), ''<_cudaCompiler_>'', format('', {0} '', parameters.cudaCompiler)) }}, ${{ join(''+'', parameters.cmakeBuildConfigurations) }}${{ replace(replace(replace(format(''<_tagBegin_>{0}<_tagEnd_>'', parameters.tag), ''<_tagBegin_><_tagEnd_>'', ''''), ''<_tagBegin_>'', '', ''), ''<_tagEnd_>'', '''') }}'
          pool:
            name: Azure Pipelines
            ${{ if and(eq(parameters.os, 'Windows'), or(eq(parameters.cxxCompiler, 'Clang'), and(eq(parameters.cxxCompiler, 'MSVC'), or(eq(cxxCompilerVersion, '19_2'), eq(cxxCompilerVersion, 'VS2019'))))) }}:
              vmImage: 'windows-2019'
            ${{ if and(eq(parameters.os, 'Windows'), or(eq(cxxCompilerVersion, '19_1'), eq(cxxCompilerVersion, 'VS2017'))) }}:
              vmImage: 'vs2017-win2016'
            ${{ if and(eq(parameters.os, 'Linux'), or(and(eq(parameters.cxxCompiler, 'GCC'), ge(6, cxxCompilerVersion)), and(eq(parameters.cxxCompiler, 'Clang'), ge(5, cxxCompilerVersion)))) }}:
              vmImage: 'ubuntu-18.04'
            ${{ if and(eq(parameters.os, 'Linux'), or(and(eq(parameters.cxxCompiler, 'GCC'), lt(6, cxxCompilerVersion)), and(eq(parameters.cxxCompiler, 'Clang'), lt(5, cxxCompilerVersion)))) }}:
              vmImage: 'ubuntu-20.04'
            ${{ if and(eq(parameters.os, 'MacOS'), eq(parameters.cxxCompiler, 'AppleClang'), or(eq(cxxCompilerVersion, '9_1'), eq(cxxCompilerVersion, '9_1_0'), eq(cxxCompilerVersion, '10'), eq(cxxCompilerVersion, '10_0'), eq(cxxCompilerVersion, '10_0_0'))) }}:
              vmImage: 'macOS-10.14'
            ${{ if and(eq(parameters.os, 'MacOS'), or(ne(parameters.cxxCompiler, 'AppleClang'), eq(cxxCompilerVersion, '10_0_1'), eq(cxxCompilerVersion, '11'), eq(cxxCompilerVersion, '11_0'), eq(cxxCompilerVersion, '11_0_0'), eq(cxxCompilerVersion, '11_0_3'), eq(cxxCompilerVersion, '12'), eq(cxxCompilerVersion, '12_0'), eq(cxxCompilerVersion, '12_0_0'), eq(cxxCompilerVersion, '12_0_5'))) }}:
              vmImage: 'macOS-10.15'
          steps:
          - pwsh: |
              if ('${{ or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}' -eq 'true') {
                  New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache'
              }

              $revision = '5'  # Update this when making incompatible changes to the build pipeline definition.
              if ($IsWindows) { $tripletOS = 'windows' }
              elseif ($IsLinux) { $tripletOS = 'linux' }
              elseif ($IsMacOS) { $tripletOS = 'osx' }
              $cxxCompilerVersion = '${{ cxxCompilerVersion }}'
              $vcpkgTriplet = '${{ parameters.vcpkgTriplet }}' -replace '<os>',$tripletOS -replace '<platform>','${{ platform }}'
              $cudaPackagesRaw = ('${{ parameters.cudaPackages }}' -replace '\s+',' ').Trim()
              $cudaPackagesRawArray = $cudaPackagesRaw.split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)
              echo "cudaPackagesRaw: '$cudaPackagesRaw'"
              echo "cudaPackagesRawArray: $cudaPackagesRawArray"
              $cmakeGenerator = '${{ parameters.cmakeGenerator }}'
              New-Item -Type Directory -Force "$HOME/bin"
              if ($IsWindows) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'MSVC') {
                      echo "##vso[task.setvariable variable=CC]cl.exe"
                      echo "##vso[task.setvariable variable=CXX]cl.exe"
                      $msvcOrVSVersion_msvcVersion = @{
                          '19_1'   = '19_1'
                          'VS2017' = '19_1'
                          '19_2'   = '19_2'
                          'VS2019' = '19_2'
                      }
                      $cxxCompilerVersion = $msvcOrVSVersion_msvcVersion[$cxxCompilerVersion]
                      $msvcVersion_msbuildGenerator = @{
                          '19_1' = 'Visual Studio 15 2017'
                          '19_2' = 'Visual Studio 16 2019'
                      }
                      $msbuildGenerator = $msvcVersion_msbuildGenerator[$cxxCompilerVersion]
                      $defaultCmakeGenerator = 'Ninja'
                  }
                  elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang') {
                      if ('${{ cxxCompilerVersion }}' -eq 'VS2019') {
                          $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                          $llvmRoot = Join-Path $vsPath 'VC\Tools\Llvm\bin'
                      }
                      else {
                          $llvmRoot = "${env:ProgramFiles}\LLVM\bin"
                      }
                      $extraPath = "$llvmRoot;$extraPath"
                      $clangClPath = "$llvmRoot\clang-cl.exe"
                      $clangClCompatPath = $clangClPath -replace '\\','/'
                      $cmakeGenerator = $cmakeGenerator -replace 'MSBuild','Visual Studio 16 2019'
                      $cmakeCompilerFlag = "-DCMAKE_C_COMPILER=`"$clangClCompatPath`" -DCMAKE_CXX_COMPILER=`"$clangClCompatPath`""
                      if ('${{ platform }}' -eq 'x86') {
                          # Workaround for https://gitlab.kitware.com/cmake/cmake/issues/16259
                          echo '##vso[task.setvariable variable=CFLAGS]-m32'
                          echo '##vso[task.setvariable variable=CXXFLAGS]-m32'
                      }
                      elseif ('${{ platform }}' -eq 'x64') {
                          # Workaround for issue similar to https://github.com/microsoft/vscode-cmake-tools/issues/1398
                          echo '##vso[task.setvariable variable=CFLAGS]-m64'
                          echo '##vso[task.setvariable variable=CXXFLAGS]-m64'
                      }
                      $msbuildGenerator = 'Ninja'
                      $defaultCmakeGenerator = 'Ninja'
                  }
                  $cmakeGenerator = $cmakeGenerator -replace 'MSBuild',$msbuildGenerator
                  if('${{ parameters.cudaCompiler }}' -and '${{ cudaCompilerVersion }}' -ne 'None') {
                      $cudaVersionRaw = '${{ cudaCompilerVersion }}'
                      $cudaVersion = $cudaVersionRaw -replace '_','.'
                      $cudaPath = "$env:SystemDrive/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v$cudaVersion"
                      $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"$cudaPath/bin/nvcc.exe`""
                      $cudaPackages = @(@('nvcc', 'cudart') + $cudaPackagesRawArray | % { "${_}_$cudaVersion" }) -replace '-','_' -join ' '
                      echo "##vso[task.setvariable variable=CUDA_PATH]$cudaPath"
                      echo "##vso[task.setvariable variable=CUDA_PATH_V$cudaVersionRaw]$cudaPath"
                  }
                  if ('${{ parameters.cxxCompiler }}' -eq 'Clang' -or '${{ parameters.cxxCompiler }}' -eq 'MSVC') {
                      # Set the correct VS environment manually, cf. https://help.appveyor.com/discussions/questions/18777-how-to-use-vcvars64bat-from-powershell.
                      $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                      $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvarsall.bat"
                      & cmd.exe /c "set > %temp%\vcvars-before.txt && call `"$vcvarsPath`" ${{ platform }} && set > %temp%\vcvars-after.txt"
                      $varsBefore = @{ }
                      Get-Content "$env:temp\vcvars-before.txt" | Foreach-Object {
                          if ($_ -match '^(.*?)=(.*)$') {
                              $varsBefore[$($matches[1])] = "$($matches[2])"
                          }
                      }
                      Get-Content "$env:temp\vcvars-after.txt" | Foreach-Object {
                          if ($_ -match '^(.*?)=(.*)$') {
                              if ($($matches[1]) -eq "PATH") {
                                  echo "##vso[task.setvariable variable=$($matches[1])]$extraPath;$($matches[2])"
                              }
                              elseif ($varsBefore[$($matches[1])] -ne "$($matches[2])") {
                                  echo "##vso[task.setvariable variable=$($matches[1])]$($matches[2])"
                              }
                          }
                      }
                  }
              }
              elseif ($IsLinux) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                      echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                  }
                  elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang') {
                      if ([int]$cxxCompilerVersion -le 6) {
                          $clangFullVersion = "$cxxCompilerVersion.0"
                      }
                      else {
                          $clangFullVersion = "$cxxCompilerVersion"
                      }
                      echo "##vso[task.setvariable variable=CC]clang-$clangFullVersion"
                      echo "##vso[task.setvariable variable=CXX]clang++-$clangFullVersion"
                  }
                  $defaultCmakeGenerator = 'Ninja'
                  if('${{ parameters.cudaCompiler }}' -and '${{ cudaCompilerVersion }}' -ne 'None') {
                      $cudaVersion = '${{ cudaCompilerVersion }}' -replace '_','.'
                      $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"/usr/local/cuda-$cudaVersion/bin/nvcc`""
                      $cudaVersion_Dash = $cudaVersion -replace '\.','-'
                      $cudaPackages = @(@('nvcc', 'cudart-dev') + $cudaPackagesRawArray | % { "cuda-$_-${cudaVersion_Dash}" }) -join ' '
                  }
                  echo "##vso[task.setvariable variable=PATH]${extraPath}:${env:PATH}"
              }
              elseif ($IsMacOS) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CXXFLAGS_OLD]$env:CXXFLAGS"
                      echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
                      echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                      echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                  }
                  $defaultCmakeGenerator = 'Ninja'
                  echo "##vso[task.setvariable variable=PATH]${extraPath}:${env:PATH}"
              }
              if ($cmakeGenerator -eq '') {
                  $cmakeGenerator = $defaultCmakeGenerator
              }
              $vcpkgRepo = '${{ parameters.vcpkgRepo }}'
              if ($vcpkgRepo -eq '' -and '${{ parameters.vcpkgRef }}') {
                  $vcpkgRepo = 'https://github.com/microsoft/vcpkg.git'
              }
              $vcpkgArgs = '${{ parameters.vcpkgArgs }}' -replace '<vcpkgArgs>','${{ parameters.vcpkgArgs }}'
              if ('${{ parameters.vcpkgOverlayRef }}') {
                  $vcpkgOverlayArgs = '--overlay-ports="$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/ports" --overlay-triplets="$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/triplets"'
              }
              $vcpkgPackages = '${{ parameters.vcpkgPackages }}'
              $cacheKey = (@(
                  "revision: $revision",
                  "platform: $(Agent.OS) $(Agent.OSArchitecture)",
                  "cxxCompiler: ${{ parameters.cxxCompiler }} $cxxCompilerVersion",
                  ("cudaCompiler: ${{ parameters.cudaCompiler }} ${{ cudaCompilerVersion }}" -replace ':.*None',': '),
                  "vcpkgTriplet: $vcpkgTriplet",
                  "vcpkgRepo: $vcpkgRepo ${{ parameters.vcpkgRef }}",
                  'vcpkgOverlayRepo: ${{ parameters.vcpkgOverlayRepo }} ${{ parameters.vcpkgOverlayRef }}',
                  "vcpkgArgs: $vcpkgArgs",
                  "vcpkgPackages: $vcpkgPackages"
              ) | Where-Object { $_ -and ($_ -replace '[A-Za-z]+:\s+','') } | % { "`"$_`"" }) -join ' | '
              if ('${{ parameters.cacheKey }}') {
                  $cacheKey += ' | ${{ parameters.cacheKey }}'
              }
              if ('${{ parameters.vcpkgRef }}') {
                  $cmakeVcpkgArgs = '-DCMAKE_TOOLCHAIN_FILE="$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/scripts/buildsystems/vcpkg.cmake"'
                  $cmakeVcpkgArgs += " -DVCPKG_TARGET_TRIPLET=$vcpkgTriplet"
              }
              $cmakeConfigArgs = '${{ parameters.cmakeConfigArgs }}' -replace '<cmakeConfigArgs>','${{ parameters.cmakeConfigArgs }}'
              $cmakeBuildArgs = '${{ parameters.cmakeBuildArgs }}' -replace '<cmakeBuildArgs>','${{ parameters.cmakeBuildArgs }}'
              $cmakeTestArgs = '${{ parameters.cmakeTestArgs }}' -replace '<cmakeTestArgs>','${{ parameters.cmakeTestArgs }}'

              $vcpkgManifestFile = ''
              if ('${{ parameters.vcpkgRef }}' -and (Test-Path '${{ parameters.cmakeSourceDir }}/vcpkg.json')) {
                  $vcpkgManifestFile = '${{ parameters.cmakeSourceDir }}/vcpkg.json | '
              }

              # public variables accessible to custom job steps
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CACHE]${{ parameters.cache }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CAPTION]${{ parameters.caption }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_TAG]${{ parameters.tag }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_OS]${{ parameters.os }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_PLATFORM]${{ platform }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER]${{ parameters.cxxCompiler }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER_VERSION]$cxxCompilerVersion"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER]${{ parameters.cudaCompiler }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER_VERSION]${{ cudaCompilerVersion }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CUDA_PACKAGES]$cudaPackages"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REPO]$vcpkgRepo"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REF]${{ parameters.vcpkgRef }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REPO]${{ parameters.vcpkgOverlayRepo }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REF]${{ parameters.vcpkgOverlayRef }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_ARGS]$vcpkgArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_PACKAGES]$vcpkgPackages"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_TOOLCHAIN_FILE]$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/scripts/buildsystems/vcpkg.cmake'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATIONS]${{ join(parameters.cmakeBuildConfigurations, ';') }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_GENERATOR]$cmakeGenerator"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_SOURCE_DIR]${{ parameters.cmakeSourceDir }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_CONFIG]${{ parameters.cmakeConfig }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_CONFIG_ARGS]$cmakeCompilerFlag $cmakeCudaCompilerFlag $cmakeConfigArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD]${{ parameters.cmakeBuild }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_ARGS]$cmakeBuildArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_TEST]${{ parameters.cmakeTest }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_TEST_ARGS]$cmakeTestArgs"
              echo '##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
              echo "##vso[task.setvariable variable=VCPKG_TRIPLET]$vcpkgTriplet"

              # private variables
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CACHE_KEY_]$cacheKey"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CLANG_FULL_VERSION_]$clangFullVersion"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_ARGS_]$vcpkgOverlayArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_MANIFEST_FILE_]$vcpkgManifestFile"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_VCPKG_ARGS_]$cmakeVcpkgArgs"
            displayName: Set environment variables

          - pwsh: |
              if ('$(System.Debug)' -eq 'True') {
                  Get-ChildItem env: | Format-List
                  if ('${{ or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}' -eq 'True') {
                      Get-ChildItem -Force -Recurse '$(Build.BinariesDirectory)/_CImakeshift_cache'
                  }
              }
              if ($IsWindows) {
                  $ninjaOS = 'win'
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'Clang') {
                    if ('$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -ne 'VS2019') {
                          $clangCompilerVersion_URL = @{
                              '9' = 'http://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe'
                              '10' = 'https://github.com/llvm/llvm-project/releases/download/llvmorg-10.0.0/LLVM-10.0.0-win64.exe'
                              '11' = 'https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.1/LLVM-11.0.1-win64.exe'
                          }
                          $clangURL = $clangCompilerVersion_URL['$(CIMAKESHIFT_CXX_COMPILER_VERSION)']
                          Invoke-WebRequest $clangURL -OutFile "$HOME/LLVM-installer.exe"
                          Start-Process -Wait "$HOME/LLVM-installer.exe" '/S'
                      }
                  }
                  if ('$(CIMAKESHIFT_CUDA_COMPILER)' -and '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -ne 'None') {
                      $cudaVersion = '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -replace '_','.'
                      $cudaVersion_URL = @{
                          '11.0' = 'http://developer.download.nvidia.com/compute/cuda/11.0.2/network_installers/cuda_11.0.2_win10_network.exe'
                          '11.1' = 'http://developer.download.nvidia.com/compute/cuda/11.1.1/network_installers/cuda_11.1.1_win10_network.exe'
                          '11.2' = 'http://developer.download.nvidia.com/compute/cuda/11.2.1/network_installers/cuda_11.2.1_win10_network.exe'
                      }
                      Invoke-WebRequest $cudaVersion_URL[$cudaVersion] -OutFile "$HOME/cuda_installer_network.exe"
                      Write-Host '[CImakeshift] Installing CUDA packages $(CIMAKESHIFT_CUDA_PACKAGES)'
                      Start-Process -Wait "$HOME/cuda_installer_network.exe" (@('-s') + ('$(CIMAKESHIFT_CUDA_PACKAGES)'.split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)))
                  }
              }
              elseif ($IsLinux) {
                  $ninjaOS = 'linux'
                  $packages = @()
                  $osVersionRaw = lsb_release -r -s
                  if ($osVersionRaw -eq '18.04') {
                      $osVersionName = 'bionic'
                  }
                  else {
                      $osVersionName = 'focal'
                  }
                  #$packages += 'cmake'
                  #Invoke-WebRequest -OutFile "$HOME/kitware-archive-latest.asc" https://apt.kitware.com/keys/kitware-archive-latest.asc
                  #& sudo apt-key add "$HOME/kitware-archive-latest.asc"
                  #& sudo apt-add-repository "deb https://apt.kitware.com/ubuntu/ $osVersionName main"
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & sudo apt-add-repository ppa:ubuntu-toolchain-r/test
                      $packages += ('gcc-$(CIMAKESHIFT_CXX_COMPILER_VERSION)', 'g++-$(CIMAKESHIFT_CXX_COMPILER_VERSION)')
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'Clang') {
                      if ([int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -ge 5 -and [int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -lt 11) {
                          $clangRepository = 'llvm-toolchain-$(CIMAKESHIFT_CLANG_FULL_VERSION_)'
                          & sudo apt-add-repository "deb http://apt.llvm.org/$osVersionName/ $clangRepository main"
                      }
                      elseif ([int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -ge 11) {
                          $clangRepository = "llvm-toolchain-$osVersionName-$(CIMAKESHIFT_CLANG_FULL_VERSION_)"
                          & sudo apt-add-repository "deb http://apt.llvm.org/$osVersionName/ $clangRepository main"
                      }
                      $packages += 'clang-$(CIMAKESHIFT_CLANG_FULL_VERSION_)'
                  }
                  if ('$(CIMAKESHIFT_CUDA_COMPILER)' -and '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -ne 'None') {
                      $cudaVersion = '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -replace '_','.'
                      $osVersionFlat = $osVersionRaw -replace [regex]::escape('.'),''
                      $ubuntuVersion = "ubuntu$osVersionFlat"
                      Invoke-WebRequest "https://developer.download.nvidia.com/compute/cuda/repos/$ubuntuVersion/x86_64/cuda-$ubuntuVersion.pin" -OutFile cuda.pin
                      & sudo mv cuda.pin /etc/apt/preferences.d/cuda-repository-pin-600
                      & sudo apt-key adv --fetch-keys "https://developer.download.nvidia.com/compute/cuda/repos/$ubuntuVersion/x86_64/7fa2af80.pub"
                      & sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/$ubuntuVersion/x86_64/ /"
                      $packages += '$(CIMAKESHIFT_CUDA_PACKAGES)'.split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)
                  }
                  & sudo apt-get update
                  Write-Host "[CImakeshift] Installing packages $packages"
                  & sudo apt-get install $packages
                  #& ln -s /usr/bin/cmake $HOME/bin/cmake
                  #& ln -s /usr/bin/ctest $HOME/bin/ctest
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & ln -s $(Get-Command $env:CC).Path $HOME/bin/gcc
                      & ln -s $(Get-Command $env:CXX).Path $HOME/bin/g++
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'Clang') {
                      & ln -s $(Get-Command $env:CC).Path $HOME/bin/clang
                      & ln -s $(Get-Command $env:CXX).Path $HOME/bin/clang++
                  }
              }
              elseif ($IsMacOS) {
                  $osVersion = [version](sw_vers -productVersion)
                  $ninjaOS = 'mac'
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & brew install gcc@$(CIMAKESHIFT_CXX_COMPILER_VERSION)
                  }
                  if ($osVersion -lt '10.15') {
                      # https://stackoverflow.com/a/52530212
                      sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg
                  }
              }
              $ninjaVersion = '1.10.2'
              Invoke-WebRequest "https://github.com/ninja-build/ninja/releases/download/v${ninjaVersion}/ninja-$ninjaOS.zip" -OutFile "$HOME/ninja-$ninjaOS.zip"
              Expand-Archive -LiteralPath "$HOME/ninja-$ninjaOS.zip" -DestinationPath "$HOME/bin"
              if (-not $IsWindows) {
                  & chmod +x $HOME/bin/ninja
              }
            displayName: Install tools

          - ${{ if or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}:
            - task: Cache@2
              displayName: Cache dependencies
              inputs:
                key: '$(CIMAKESHIFT_VCPKG_MANIFEST_FILE_)$(CIMAKESHIFT_CACHE_KEY_)'
                path: '$(Build.BinariesDirectory)/_CImakeshift_cache'
                cacheHitVar: 'CIMAKESHIFT_DEPENDENCY_CACHE_HIT'

          - ${{ if and(parameters.vcpkgRef, parameters.vcpkgOverlayRepo, parameters.vcpkgOverlayRef) }}:
            - pwsh: |
                & git clone $(CIMAKESHIFT_VCPKG_OVERLAY_REPO) '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo'
                cd '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo'
                & git checkout --quiet --force $(CIMAKESHIFT_VCPKG_OVERLAY_REF)
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/ports'
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/triplets'
                Remove-Item -Recurse -Force './.git'
              displayName: Clone Vcpkg overlay repository
              condition: ne(variables.CIMAKESHIFT_DEPENDENCY_CACHE_HIT, 'true')

          - ${{ if parameters.vcpkgRef }}:
            - pwsh: |
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache'
                if ($IsWindows) {
                    New-Item -ItemType SymbolicLink -Path "$env:LOCALAPPDATA" -Name 'vcpkg' -Value '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache'
                }
                else {
                    New-Item -Type Directory -Force "$env:HOME/.cache"
                    & ln -s '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache' "$env:HOME/.cache/vcpkg"
                }
                if ('$(CIMAKESHIFT_DEPENDENCY_CACHE_HIT)' -ne 'True') {
                    & git clone $(CIMAKESHIFT_VCPKG_REPO) '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                    cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                    & git checkout --quiet --force $(CIMAKESHIFT_VCPKG_REF)
                    if ($IsWindows) {
                        & ./bootstrap-vcpkg.bat
                    }
                    else {  # Linux or MacOS
                        $env:CC = ''
                        $env:CXX = ''
                        & chmod +x ./bootstrap-vcpkg.sh
                        & ./bootstrap-vcpkg.sh
                    }
                    Remove-Item -Recurse -Force './.git'
                }
              displayName: Bootstrap Vcpkg
              condition: ne(variables.CIMAKESHIFT_DEPENDENCY_CACHE_HIT, 'true')

          - pwsh: |
              if ('$(System.Debug)' -eq 'True') {
                  Get-ChildItem env: | Format-List # for debugging
              }
              if ($IsMacOS) {
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS_OLD"
                      echo '##vso[task.setvariable variable=CC]gcc-$(CIMAKESHIFT_CXX_COMPILER_VERSION)'
                      echo '##vso[task.setvariable variable=CXX]g++-$(CIMAKESHIFT_CXX_COMPILER_VERSION)'
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'AppleClang') {
                      $appleClangVersion_xcodeVersion = @{
                          '9_1'    = '9.4.1'
                          '9_1_0'  = '9.4.1'
                          '10'     = '10.1'    # also 10
                          '10_0'   = '10.1'
                          '10_0_0' = '10.1'
                          '10_0_1' = '10.3'    # also 10.2, 10.2.1
                          '11'     = '11.3.1'  # also 11.1, 11.2, 11.2.1, 11.3
                          '11_0'   = '11.3.1'
                          '11_0_0' = '11.3.1'
                          '11_0_3' = '11.6'    # also 11.4, 11.4.1, 11.5
                          '12'     = '12.4'    # also 12.0, 12.1, 12.2, 12.3
                          '12_0'   = '12.4'
                          '12_0_0' = '12.4'
                          #'12_0_5' = '12.5'  # currently in beta
                      }
                      $xcodeVersion = $appleClangVersion_xcodeVersion['$(CIMAKESHIFT_CXX_COMPILER_VERSION)']
                      & sudo xcode-select -s /Applications/Xcode_$xcodeVersion.app/Contents/Developer
                      echo '##vso[task.setvariable variable=CC]clang'
                      echo '##vso[task.setvariable variable=CXX]clang++'
                  }
              }
            displayName: Set environment variables

          - ${{ if parameters.vcpkgRef }}:
            - pwsh: |
                cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                if ($env:CIMAKESHIFT_VCPKG_PACKAGES) {
                    & ./vcpkg $(CIMAKESHIFT_VCPKG_OVERLAY_ARGS_) --triplet $(VCPKG_TRIPLET) $(CIMAKESHIFT_VCPKG_ARGS) install $(CIMAKESHIFT_VCPKG_PACKAGES)
                }
                if (Test-Path "$env:CIMAKESHIFT_CMAKE_SOURCE_DIR/vcpkg.json") {
                    # Vcpkg manifest mode
                    New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_manifest_installed'
                    if ($IsWindows) {
                        New-Item -ItemType SymbolicLink -Path $env:CIMAKESHIFT_CMAKE_SOURCE_DIR -Name 'vcpkg_installed' -Value '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_manifest_installed'
                    }
                    else {
                        & ln -s '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_manifest_installed' "$env:CIMAKESHIFT_CMAKE_SOURCE_DIR/vcpkg_installed"
                    }
                    cd $env:CIMAKESHIFT_CMAKE_SOURCE_DIR
                    & '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/vcpkg' $(CIMAKESHIFT_VCPKG_OVERLAY_ARGS_) --triplet $(VCPKG_TRIPLET) $(CIMAKESHIFT_VCPKG_ARGS) '--feature-flags=manifests' install
                    cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                }
                Remove-Item -Recurse -Force './buildtrees' -ErrorAction Ignore
                Remove-Item -Recurse -Force './downloads' -ErrorAction Ignore
                Remove-Item -Recurse -Force './packages' -ErrorAction Ignore
              displayName: Install Vcpkg packages
              condition: ne(variables.CIMAKESHIFT_DEPENDENCY_CACHE_HIT, 'true')

          - ${{ each step in parameters.postSetupSteps }}:
            - ${{ each pair in step }}:
                ${{ pair.key }}: ${{ pair.value }}
          - ${{ if parameters.targetPostSetupSteps }}:
            - ${{ each step in parameters.targetPostSetupSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}

          - ${{ each config in parameters.cmakeBuildConfigurations }}:
            - ${{ if coalesce(parameters.preBuildSteps, parameters.targetPreBuildSteps, parameters.postBuildSteps, parameters.targetPostBuildSteps) }}:
              - pwsh: |
                  echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATION]${{ config }}'
                displayName: Set environment variables for build configuration

            - ${{ each step in parameters.preBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if parameters.targetPreBuildSteps }}:
              - ${{ each step in parameters.targetPreBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

            - ${{ if eq(parameters.cmakeConfig, 'true') }}:
              - pwsh: |
                  New-Item -Type Directory -Force '$(Build.BinariesDirectory)/build/${{ config }}'
                  cd '$(Build.BinariesDirectory)/build/${{ config }}'
                  if ('${{ parameters.vcpkgRef }}' -and (Test-Path "$env:CIMAKESHIFT_CMAKE_SOURCE_DIR/vcpkg.json")) {
                      if ($IsWindows) {
                          New-Item -ItemType SymbolicLink -Path . -Name 'vcpkg_installed' -Value '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_manifest_installed'
                      }
                      else {
                          & ln -s '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_manifest_installed' './vcpkg_installed'
                      }
                  }
                  $vcpkgArgs = $env:CIMAKESHIFT_CMAKE_VCPKG_ARGS_ -split ' '
                  $args = $env:CIMAKESHIFT_CMAKE_CONFIG_ARGS -split ' '
                  & cmake -G $env:CIMAKESHIFT_CMAKE_GENERATOR -DCMAKE_BUILD_TYPE=${{ config }} $vcpkgArgs $env:CIMAKESHIFT_CMAKE_SOURCE_DIR $args
                displayName: 'Configure ${{ config }}'

            - ${{ if eq(parameters.cmakeBuild, 'true') }}:
              - pwsh: |
                  $args = $env:CIMAKESHIFT_CMAKE_BUILD_ARGS -split ' '
                  & cmake --build '$(Build.BinariesDirectory)/build/${{ config }}' --parallel --verbose --config ${{ config }} $args
                displayName: 'Build ${{ config }}'

            - ${{ if eq(parameters.cmakeTest, 'true') }}:
              - pwsh: |
                  cd '$(Build.BinariesDirectory)/build/${{ config }}'
                  $args = $env:CIMAKESHIFT_CMAKE_TEST_ARGS -split ' '
                  & ctest --verbose --output-on-failure --test-action Test --build-config ${{ config }} $args
                  if (-not $?) {
                      if (Test-Path 'Testing/Temporary') {
                          foreach ($file in Get-ChildItem "Testing/Temporary/MemoryChecker.*.log") {
                              Get-Content $file
                          }
                      }
                      exit 1
                  }
                displayName: 'Run tests for ${{ config }}'

            - ${{ each step in parameters.postBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if parameters.targetPostBuildSteps }}:
              - ${{ each step in parameters.targetPostBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

          - ${{ if eq(parameters.cmakeTest, 'true') }}:
            - task: PublishTestResults@2
              displayName: Publish test results
              inputs:
                testResultsFormat: 'cTest'
                testResultsFiles: '$(Build.BinariesDirectory)/build/*/Testing/*/Test.xml'
                testRunTitle: '$(Agent.JobName)'
