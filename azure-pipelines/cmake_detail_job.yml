# Internal template: declare jobs for target

parameters:

  # Passed-through parameters
  cmakeSourceDir: ''
  postSetupSteps: []
  preBuildSteps: []
  postBuildSteps: []
  targetPreBuildSteps: []
  targetPostBuildSteps: []

  # Coalesced parameters
  caption: ''
  tag: ''
  os: ''
  platforms: []
  cxxCompiler: ''
  cxxCompilerVersions: []
  cudaCompiler: ''
  cudaCompilerVersions: []
  cxxStandardLibrary: ''
  cxxStandardLibraryDebugMode: ''
  cxxSanitizers: []
  vcpkgRepo: ''
  vcpkgRef: ''
  vcpkgOverlayRepo: ''
  vcpkgOverlayRef: ''
  vcpkgTriplet: ''
  vcpkgCache: ''
  vcpkgCacheKey: ''
  cmakeToolchainFile: ''
  cmakeBuildConfigurations: []
  cmakeGenerator: ''
  cmakeConfig: ''
  cmakeBuild: ''
  cmakeTest: ''

  # Augmented string parameters
  cudaPackages: ''
  vcpkgPackages: ''
  vcpkgArgs: ''
  cmakeConfigArgs: ''
  cmakeBuildArgs: ''
  cmakeTestArgs: ''


jobs:
- ${{ if and(parameters.platforms, parameters.cxxCompilerVersions, parameters.cudaCompilerVersions) }}:
  - ${{ each platform in parameters.platforms }}:
    - ${{ each cxxCompilerVersion in parameters.cxxCompilerVersions }}:
      - ${{ each cudaCompilerVersion in parameters.cudaCompilerVersions }}:
        - job: '${{ replace(replace(replace(format(''<_captionBegin_>{0}<_captionEnd_>'', replace(replace(replace(parameters.caption, ''+'', ''_''), ''.'', ''_''), '' '', ''_'')), ''<_captionBegin_><_captionEnd_>'', ''''), ''<_captionBegin_>'', ''''), ''<_captionEnd_>'', ''_'') }}${{ parameters.os }}_${{ platform }}_${{ parameters.cxxCompiler }}${{ cxxCompilerVersion }}${{ replace(replace(format(''<_cudaCompiler_>{0}'', cudaCompilerVersion), ''<_cudaCompiler_>None'', ''''), ''<_cudaCompiler_>'', format(''_{0}'', parameters.cudaCompiler)) }}_${{ join(''_'', parameters.cmakeBuildConfigurations) }}${{ replace(replace(replace(format(''<_tagBegin_>{0}<_tagEnd_>'', replace(replace(replace(parameters.tag, ''+'',''_''), ''.'', ''_''), '' '', ''_'')), ''<_tagBegin_><_tagEnd_>'', ''''), ''<_tagBegin_>'', ''_''), ''<_tagEnd_>'', '''') }}'
          displayName: '${{ replace(replace(replace(format(''<_captionBegin_>{0}<_captionEnd_>'', parameters.caption), ''<_captionBegin_><_captionEnd_>'', ''''), ''<_captionBegin_>'', ''''), ''<_captionEnd_>'', '': '') }}${{ parameters.os }} ${{ platform }}, ${{ parameters.cxxCompiler }} ${{ replace(cxxCompilerVersion, ''_'', ''.'') }}${{ replace(replace(format(''<_cudaCompiler_>{0}'', replace(cudaCompilerVersion, ''_'', ''.'')), ''<_cudaCompiler_>None'', ''''), ''<_cudaCompiler_>'', format('', {0} '', parameters.cudaCompiler)) }}, ${{ join(''+'', parameters.cmakeBuildConfigurations) }}${{ replace(replace(replace(format(''<_tagBegin_>{0}<_tagEnd_>'', parameters.tag), ''<_tagBegin_><_tagEnd_>'', ''''), ''<_tagBegin_>'', '', ''), ''<_tagEnd_>'', '''') }}'
          pool:
            name: Azure Pipelines
            ${{ if and(eq(parameters.os, 'Windows'), or(and(eq(parameters.cxxCompiler, 'Clang'), eq(cxxCompilerVersion, 'VS2022')), and(eq(parameters.cxxCompiler, 'MSVC'), or(eq(cxxCompilerVersion, 'VS2022'), eq(cxxCompilerVersion, '19_3'))))) }}:
              vmImage: 'windows-2022'
            ${{ if and(eq(parameters.os, 'Windows'), or(and(eq(parameters.cxxCompiler, 'Clang'), eq(cxxCompilerVersion, 'VS2019')), and(eq(parameters.cxxCompiler, 'MSVC'), or(eq(cxxCompilerVersion, 'VS2019'), eq(cxxCompilerVersion, '19_2'))))) }}:
              vmImage: 'windows-2019'
            ${{ if and(eq(parameters.os, 'Linux'), or(and(eq(parameters.cxxCompiler, 'GCC'), lt(10, cxxCompilerVersion)), and(eq(parameters.cxxCompiler, 'Clang'), lt(10, cxxCompilerVersion)))) }}:
              vmImage: 'ubuntu-22.04'
            ${{ if and(eq(parameters.os, 'Linux'), or(and(eq(parameters.cxxCompiler, 'GCC'), lt(6, cxxCompilerVersion), ge(10, cxxCompilerVersion)), and(eq(parameters.cxxCompiler, 'Clang'), lt(5, cxxCompilerVersion), ge(10, cxxCompilerVersion)))) }}:
              vmImage: 'ubuntu-20.04'
            ${{ if and(eq(parameters.os, 'MacOS'), eq(parameters.cxxCompiler, 'AppleClang'), or(eq(cxxCompilerVersion, '13'), eq(cxxCompilerVersion, '13_0'), eq(cxxCompilerVersion, '13_0_0'), eq(cxxCompilerVersion, '13_1_6'), eq(cxxCompilerVersion, '14'), eq(cxxCompilerVersion, '14_0'), eq(cxxCompilerVersion, '14_0_0'), eq(cxxCompilerVersion, '14_0_3'))) }}:
              vmImage: 'macOS-12'
            ${{ if and(eq(parameters.os, 'MacOS'), eq(parameters.cxxCompiler, 'GCC'), ge(cxxCompilerVersion, '10')) }}:
              vmImage: 'macOS-12'
            ${{ if and(eq(parameters.os, 'MacOS'), eq(parameters.cxxCompiler, 'GCC'), lt(cxxCompilerVersion, '10')) }}:
              vmImage: 'macOS-11'
            ${{ if and(eq(parameters.os, 'MacOS'), eq(parameters.cxxCompiler, 'AppleClang'), or(eq(cxxCompilerVersion, '11_0_3'), eq(cxxCompilerVersion, '12'), eq(cxxCompilerVersion, '12_0'), eq(cxxCompilerVersion, '12_0_0'), eq(cxxCompilerVersion, '12_0_5'))) }}:
              vmImage: 'macOS-11'
          steps:
          - pwsh: |
              New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_files'
              if ('${{ parameters.cmakeToolchainFile }}') {
                  Copy-Item '${{ parameters.cmakeToolchainFile }}' -Destination '$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake'
              }
              else {
                  New-Item '$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake' -ItemType file
              }
              $toolchainFileAppendix = @'
              
              
              include_guard(GLOBAL)
              '@

              $cxxStandardLibrary = '${{ parameters.cxxStandardLibrary }}'
              $cxxStandardLibraryDebugMode = ('${{ parameters.cxxStandardLibraryDebugMode }}' -eq 'true')
              if ('${{ parameters.cxxCompiler }}' -eq 'MSVC' -or ('${{ parameters.cxxCompiler }}' -eq 'Clang' -and $IsWindows)) {
                  if ($cxxStandardLibrary -eq '' -or $cxxStandardLibrary -eq 'default' -or $cxxStandardLibrary -ne 'MS-STL') {
                      if ($cxxStandardLibraryDebugMode) {
                          $toolchainFileAppendix += @'
              
              
              # For Microsoft STL, enable checked iterators in non-Debug builds by setting `_ITERATOR_DEBUG_LEVEL=1`. (Debug builds already
              # have debug iterators, a superset of checked iterators, enabled by default, i.e. `_ITERATOR_DEBUG_LEVEL=2`.)
              set(CMAKE_CXX_FLAGS_DEBUG_INIT "${CMAKE_CXX_FLAGS_DEBUG_INIT}")
              set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "${CMAKE_CXX_FLAGS_MINSIZEREL_INIT} /D_ITERATOR_DEBUG_LEVEL=1")
              set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT} /D_ITERATOR_DEBUG_LEVEL=1")
              set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CMAKE_CXX_FLAGS_RELEASE_INIT} /D_ITERATOR_DEBUG_LEVEL=1")
              '@
                      }
                  }
                  else {
                      throw "Unsupported C++ standard library '$cxxStandardLibrary' for ${{ parameters.cxxCompiler }}"
                  }
              }
              elseif ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                  if ($cxxStandardLibrary -eq '' -or $cxxStandardLibrary -eq 'default' -or $cxxStandardLibrary -eq 'libstdc++') {
                      if ($cxxStandardLibraryDebugMode) {
                          $toolchainFileAppendix += @'
              
              
              # For libstdc++, enable the debug mode for all configurations by defining `_GLIBCXX_DEBUG`.
              set(CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT} -D_GLIBCXX_DEBUG")
              '@
                      }
                  }
                  else {
                      throw "Unsupported C++ standard library '$cxxStandardLibrary' for ${{ parameters.cxxCompiler }}"
                  }
              }
              elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang' -or '${{ parameters.cxxCompiler }}' -eq 'AppleClang') {
                  if ($cxxStandardLibrary -eq '' -or $cxxStandardLibrary -eq 'default' -or $cxxStandardLibrary -eq 'libc++') {
                      if ($cxxStandardLibraryDebugMode) {
                          $toolchainFileAppendix += @'
              
              
              # For libc++, enable iterator debugging + assertions (`_LIBCPP_DEBUG=1`) in the Debug build; for Release builds, enable iterator
              # debugging only (`_LIBCPP_DEBUG=0`).
              set(CMAKE_CXX_FLAGS_DEBUG_INIT "${CMAKE_CXX_FLAGS_DEBUG_INIT} -D_LIBCPP_DEBUG=1")
              set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "${CMAKE_CXX_FLAGS_MINSIZEREL_INIT} -D_LIBCPP_DEBUG=0")
              set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT} -D_LIBCPP_DEBUG=0")
              set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CMAKE_CXX_FLAGS_RELEASE_INIT} -D_LIBCPP_DEBUG=0")
              '@
                      }
                  }
                  elseif ($cxxStandardLibrary -eq 'libstdc++') {
                      $toolchainFileAppendix += @'
              
              
              # Use libstdc++ as standard library.
              set(CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT} -stdlib=libstdc++")
              '@
                      if ($cxxStandardLibraryDebugMode) {
                          $toolchainFileAppendix += @'
              
              
              # For libstdc++, enable the debug mode for all configurations by defining `_GLIBCXX_DEBUG`.
              set(CMAKE_CXX_FLAGS_INIT "${CMAKE_CXX_FLAGS_INIT} -D_GLIBCXX_DEBUG")
              '@
                      }
                  }
                  else {
                      throw "Unsupported C++ standard library '$cxxStandardLibrary' for ${{ parameters.cxxCompiler }}"
                  }
              }
              $cxxSanitizers = '${{ join(';', parameters.cxxSanitizers) }}'.split(';', [System.StringSplitOptions]::RemoveEmptyEntries) | select -Unique
              $sanitizeCompileFlags = @()
              $sanitizeLinkFlags = @()
              if ('${{ parameters.cxxCompiler }}' -eq 'MSVC') {
                  foreach ($sanitizer in $cxxSanitizers) {
                      if ($sanitizer -eq 'ASan' -or $sanitizer -eq 'AddressSanitizer') {
                          $sanitizeCompileFlags += @('/fsanitize=address')
                      }
                      else {
                          throw "Unsupported C++ sanitizer '$sanitizer' for ${{ parameters.cxxCompiler }}"
                      }
                  }
              }
              elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang' -or '${{ parameters.cxxCompiler }}' -eq 'AppleClang') {
                  $anySan = $false
                  $anyUBSan = $false
                  foreach ($sanitizer in $cxxSanitizers) {
                      if ($sanitizer -eq 'ASan' -or $sanitizer -eq 'AddressSanitizer') {
                          $sanitizeCompileFlags += @('-fsanitize=address')
                          $sanitizeLinkFlags += @('-fsanitize=address')
                          $anySan = $true
                      }
                      elseif ($sanitizer -eq 'UBSan' -or $sanitizer -eq 'UndefinedBehaviorSanitizer') {
                          $sanitizeCompileFlags += @('-fsanitize=undefined')
                          $anySan = $true
                          $anyUBSan = $true
                      }
                      elseif ($sanitizer -eq 'ImplicitIntegerArithmeticValueChange') {
                          $sanitizeCompileFlags += @('-fsanitize=implicit-integer-arithmetic-value-change')
                          $anySan = $true
                          $anyUBSan = $true
                      }
                      else {
                          throw "Unsupported C++ sanitizer '$sanitizer' for ${{ parameters.cxxCompiler }}"
                      }
                  }
                  if ($anySan) {
                      $sanitizeCompileFlags += @('-fno-omit-frame-pointer')
                  }
                  if ($anyUBSan) {
                      $sanitizeCompileFlags += @('-fsanitize-trap=undefined')
                      $sanitizeLinkFlags += @('-fsanitize=undefined')
                  }
              }
              elseif ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                  $anySan = $false
                  foreach ($sanitizer in $cxxSanitizers) {
                      if ($sanitizer -eq 'ASan' -or $sanitizer -eq 'AddressSanitizer') {
                          $sanitizeCompileFlags += @('-fsanitize=address')
                          $sanitizeLinkFlags += @('-fsanitize=address')
                          $anySan = $true
                      }
                      elseif ($sanitizer -eq 'UBSan' -or $sanitizer -eq 'UndefinedBehaviorSanitizer') {
                          $sanitizeCompileFlags += @('-fsanitize=undefined', '-fsanitize-undefined-trap-on-error')
                          $sanitizeLinkFlags += @('-fsanitize=undefined')
                          $anySan = $true
                      }
                      else {
                          throw "Unsupported C++ sanitizer '$sanitizer' for ${{ parameters.cxxCompiler }}"
                      }
                  }
                  if ($anySan) {
                      $sanitizeCompileFlags += @('-fno-omit-frame-pointer')
                  }
              }
              if ($sanitizeCompileFlags.Count -ne 0) {
                  $toolchainFileAppendix += @"
              
              
              # Enable sanitizers for ${{ parameters.cxxCompiler }}.
              set(CMAKE_C_FLAGS_INIT "`${CMAKE_C_FLAGS_INIT} $($sanitizeCompileFlags -join ' ')")
              set(CMAKE_CXX_FLAGS_INIT "`${CMAKE_CXX_FLAGS_INIT} $($sanitizeCompileFlags -join ' ')")
              "@
                  if ($sanitizeLinkFlags.Count -ne 0) {
                      $toolchainFileAppendix += @"
              
              set(CMAKE_EXE_LINKER_FLAGS_INIT "`${CMAKE_EXE_LINKER_FLAGS_INIT} $($sanitizeLinkFlags -join ' ')")
              set(CMAKE_MODULE_LINKER_FLAGS_INIT "`${CMAKE_MODULE_LINKER_FLAGS_INIT} $($sanitizeLinkFlags -join ' ')")
              set(CMAKE_SHARED_LINKER_FLAGS_INIT "`${CMAKE_SHARED_LINKER_FLAGS_INIT} $($sanitizeLinkFlags -join ' ')")
              "@
                  }
              }
              Add-Content -Path '$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake' -Value $toolchainFileAppendix
              echo "Toolchain file:"
              echo "--------------------"
              Get-Content '$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake'
              echo "--------------------"
            displayName: Assemble toolchain file

          - pwsh: |
              $revision = '6'  # Update this when making incompatible changes to the build pipeline definition.
              echo "DEBUG: IsWindows: $IsWindows, IsLinux: $IsLinux, IsMacOS: $IsMacOS"
              if ($IsWindows) { $tripletOS = 'windows' }
              elseif ($IsLinux) { $tripletOS = 'linux' }
              elseif ($IsMacOS) { $tripletOS = 'osx' }
              if ('${{ or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}' -eq 'true') {
                  New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache'
              }
              $cxxCompilerVersion = '${{ cxxCompilerVersion }}'
              $vcpkgTriplet = '${{ parameters.vcpkgTriplet }}' -replace '<os>',$tripletOS -replace '<platform>','${{ platform }}'
              $cudaPackagesRaw = ('${{ parameters.cudaPackages }}' -replace '\s+',' ').Trim()
              $cudaPackagesRawArray = $cudaPackagesRaw.split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)
              $cmakeGenerator = '${{ parameters.cmakeGenerator }}'
              New-Item -Type Directory -Force "$HOME/bin"
              if ($IsWindows) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'MSVC') {
                      echo "##vso[task.setvariable variable=CC]cl.exe"
                      echo "##vso[task.setvariable variable=CXX]cl.exe"
                      $msvcOrVSVersion_msvcVersion = @{
                          '19_2'   = '19_2'
                          'VS2019' = '19_2'
                          '19_3'   = '19_3'
                          'VS2022' = '19_3'
                      }
                      $cxxCompilerVersion = $msvcOrVSVersion_msvcVersion[$cxxCompilerVersion]
                      $msvcVersion_msbuildGenerator = @{
                          '19_2' = 'Visual Studio 16 2019'
                          '19_3' = 'Visual Studio 17 2022'
                      }
                      $msbuildGenerator = $msvcVersion_msbuildGenerator[$cxxCompilerVersion]
                      $defaultCmakeGenerator = 'Ninja'
                  }
                  elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang') {
                      $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                      $llvmRoot = Join-Path $vsPath 'VC\Tools\Llvm\bin'
                      $extraPath = "$llvmRoot;$extraPath"
                      $clangClPath = "$llvmRoot\clang-cl.exe"
                      $clangClCompatPath = $clangClPath -replace '\\','/'
                      $cmakeCompilerFlag = "-DCMAKE_C_COMPILER=`"$clangClCompatPath`" -DCMAKE_CXX_COMPILER=`"$clangClCompatPath`""
                      if ('${{ platform }}' -eq 'x86') {
                          # Workaround for https://gitlab.kitware.com/cmake/cmake/issues/16259
                          echo '##vso[task.setvariable variable=CFLAGS]-m32'
                          echo '##vso[task.setvariable variable=CXXFLAGS]-m32'
                      }
                      elseif ('${{ platform }}' -eq 'x64') {
                          # Workaround for issue similar to https://github.com/microsoft/vscode-cmake-tools/issues/1398
                          echo '##vso[task.setvariable variable=CFLAGS]-m64'
                          echo '##vso[task.setvariable variable=CXXFLAGS]-m64'
                      }
                      if ('${{ cxxCompilerVersion }}' -eq 'VS2019') {
                        $msbuildGenerator = 'Visual Studio 16 2019'
                      }
                      else {
                        $msbuildGenerator = 'Visual Studio 17 2022'
                      }
                      $defaultCmakeGenerator = 'Ninja'
                  }
                  $cmakeGenerator = $cmakeGenerator -replace 'MSBuild',$msbuildGenerator
                  if('${{ parameters.cudaCompiler }}' -and '${{ cudaCompilerVersion }}' -ne 'None') {
                      $cudaVersionRaw = '${{ cudaCompilerVersion }}'
                      $cudaVersion = $cudaVersionRaw -replace '_','.'
                      $cudaPath = "$env:SystemDrive/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v$cudaVersion"
                      $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"$cudaPath/bin/nvcc.exe`""
                      $cudaPackages = @(@('nvcc', 'cudart') + $cudaPackagesRawArray | % { "${_}_$cudaVersion" }) -replace '-','_' -join ' '
                      echo "##vso[task.setvariable variable=CUDA_PATH]$cudaPath"
                      echo "##vso[task.setvariable variable=CUDA_PATH_V$cudaVersionRaw]$cudaPath"
                  }
                  if ('${{ parameters.cxxCompiler }}' -eq 'Clang' -or '${{ parameters.cxxCompiler }}' -eq 'MSVC') {
                      # Set the correct VS environment manually, cf. https://help.appveyor.com/discussions/questions/18777-how-to-use-vcvars64bat-from-powershell.
                      $vsPath = &"${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"  -latest -prerelease -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                      $vcvarsPath = "$vsPath\VC\Auxiliary\Build\vcvarsall.bat"
                      & cmd.exe /c "set > %temp%\vcvars-before.txt && call `"$vcvarsPath`" ${{ platform }} && set > %temp%\vcvars-after.txt"
                      $varsBefore = @{ }
                      Get-Content "$env:temp\vcvars-before.txt" | Foreach-Object {
                          if ($_ -match '^(.*?)=(.*)$') {
                              $varsBefore[$($matches[1])] = "$($matches[2])"
                          }
                      }
                      Get-Content "$env:temp\vcvars-after.txt" | Foreach-Object {
                          if ($_ -match '^(.*?)=(.*)$') {
                              if ($($matches[1]) -eq "PATH") {
                                  echo "##vso[task.setvariable variable=$($matches[1])]$extraPath;$($matches[2])"
                              }
                              elseif ($varsBefore[$($matches[1])] -ne "$($matches[2])") {
                                  echo "##vso[task.setvariable variable=$($matches[1])]$($matches[2])"
                              }
                          }
                      }
                  }
              }
              elseif ($IsLinux) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                      echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                  }
                  elseif ('${{ parameters.cxxCompiler }}' -eq 'Clang') {
                      if ([int]$cxxCompilerVersion -le 6) {
                          $clangFullVersion = "$cxxCompilerVersion.0"
                      }
                      else {
                          $clangFullVersion = "$cxxCompilerVersion"
                      }
                      echo "##vso[task.setvariable variable=CC]clang-$clangFullVersion"
                      echo "##vso[task.setvariable variable=CXX]clang++-$clangFullVersion"
                  }
                  $defaultCmakeGenerator = 'Ninja'
                  if('${{ parameters.cudaCompiler }}' -and '${{ cudaCompilerVersion }}' -ne 'None') {
                      $cudaVersion = '${{ cudaCompilerVersion }}' -replace '_','.'
                      $cmakeCudaCompilerFlag = "-DCMAKE_CUDA_COMPILER=`"/usr/local/cuda-$cudaVersion/bin/nvcc`""
                      $cudaVersion_Dash = $cudaVersion -replace '\.','-'
                      $cudaPackages = @(@('nvcc', 'cudart-dev') + $cudaPackagesRawArray | % { "cuda-$_-${cudaVersion_Dash}" }) -join ' '
                  }
                  echo "##vso[task.setvariable variable=PATH]${extraPath}:${env:PATH}"
              }
              elseif ($IsMacOS) {
                  $extraPath = "$HOME/bin"
                  if ('${{ parameters.cxxCompiler }}' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CXXFLAGS_OLD]$env:CXXFLAGS"
                      echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS -fvisibility=hidden -fvisibility-inlines-hidden"
                      echo "##vso[task.setvariable variable=CC]gcc-$cxxCompilerVersion"
                      echo "##vso[task.setvariable variable=CXX]g++-$cxxCompilerVersion"
                  }
                  $defaultCmakeGenerator = 'Ninja'
                  echo "##vso[task.setvariable variable=PATH]${extraPath}:${env:PATH}"
              }
              if ($cmakeGenerator -eq '') {
                  $cmakeGenerator = $defaultCmakeGenerator
              }
              $vcpkgRepo = '${{ parameters.vcpkgRepo }}'
              if ($vcpkgRepo -eq '' -and '${{ parameters.vcpkgRef }}') {
                  $vcpkgRepo = 'https://github.com/microsoft/vcpkg.git'
              }
              $vcpkgArgs = '${{ parameters.vcpkgArgs }}'
              if ('${{ parameters.vcpkgOverlayRef }}') {
                  $vcpkgOverlayArgs = '--overlay-ports="$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/ports" --overlay-triplets="$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/triplets"'
              }
              $vcpkgPackages = '${{ parameters.vcpkgPackages }}'
              $cacheKey = (@(
                  "revision: $revision",
                  "platform: $(Agent.OS) $(Agent.OSArchitecture)",
                  "cxxCompiler: ${{ parameters.cxxCompiler }} $cxxCompilerVersion",
                  ("cudaCompiler: ${{ parameters.cudaCompiler }} ${{ cudaCompilerVersion }}" -replace ':.*None',': '),
                  "vcpkgTriplet: $vcpkgTriplet",
                  "vcpkgRepo: $vcpkgRepo ${{ parameters.vcpkgRef }}",
                  'vcpkgOverlayRepo: ${{ parameters.vcpkgOverlayRepo }} ${{ parameters.vcpkgOverlayRef }}',
                  "vcpkgArgs: $vcpkgArgs",
                  "vcpkgPackages: $vcpkgPackages"
              ) | Where-Object { $_ -and ($_ -replace '[A-Za-z]+:\s+','') } | % { "`"$_`"" }) -join ' | '
              if ('${{ parameters.cacheKey }}') {
                  $cacheKey += ' | ${{ parameters.cacheKey }}'
              }
              if ('${{ parameters.vcpkgRef }}') {
                  $cmakeVcpkgArgs = '-DCMAKE_TOOLCHAIN_FILE="$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/scripts/buildsystems/vcpkg.cmake" -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE="$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake"'
                  $cmakeVcpkgArgs += " -DVCPKG_TARGET_TRIPLET=$vcpkgTriplet"
              }
              else {
                  $cmakeVcpkgArgs = '-DCMAKE_TOOLCHAIN_FILE="$(Build.BinariesDirectory)/_CImakeshift_files/toolchain.cmake"'
              }
              $cmakeConfigArgs = '${{ parameters.cmakeConfigArgs }}'
              $cmakeBuildArgs = '${{ parameters.cmakeBuildArgs }}'
              $cmakeTestArgs = '${{ parameters.cmakeTestArgs }}'

              $vcpkgManifestFile = ''
              if ('${{ parameters.vcpkgRef }}' -and (Test-Path '${{ parameters.cmakeSourceDir }}/vcpkg.json')) {
                  $vcpkgManifestFile = '${{ parameters.cmakeSourceDir }}/vcpkg.json | '
                  $cacheKey += ' | ${{ parameters.cmakeSourceDir }}/vcpkg.json'
              }

              # public variables accessible to custom job steps
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CACHE]${{ parameters.cache }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CAPTION]${{ parameters.caption }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_TAG]${{ parameters.tag }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_OS]${{ parameters.os }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_PLATFORM]${{ platform }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER]${{ parameters.cxxCompiler }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CXX_COMPILER_VERSION]$cxxCompilerVersion"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER]${{ parameters.cudaCompiler }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CUDA_COMPILER_VERSION]${{ cudaCompilerVersion }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CUDA_PACKAGES]$cudaPackages"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REPO]$vcpkgRepo"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_REF]${{ parameters.vcpkgRef }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REPO]${{ parameters.vcpkgOverlayRepo }}'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_REF]${{ parameters.vcpkgOverlayRef }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_ARGS]$vcpkgArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_PACKAGES]$vcpkgPackages"
              echo '##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_TOOLCHAIN_FILE]$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/scripts/buildsystems/vcpkg.cmake'
              echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATIONS]${{ join(';', parameters.cmakeBuildConfigurations) }}'
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_GENERATOR]$cmakeGenerator"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_SOURCE_DIR]${{ parameters.cmakeSourceDir }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_CONFIG]${{ parameters.cmakeConfig }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_CONFIG_ARGS]$cmakeCompilerFlag $cmakeCudaCompilerFlag $cmakeConfigArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD]${{ parameters.cmakeBuild }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_ARGS]$cmakeBuildArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_TEST]${{ parameters.cmakeTest }}"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_TEST_ARGS]$cmakeTestArgs"
              echo '##vso[task.setvariable variable=VCPKG_ROOT]$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
              echo "##vso[task.setvariable variable=VCPKG_TRIPLET]$vcpkgTriplet"

              # private variables
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CACHE_KEY_]$cacheKey"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CLANG_FULL_VERSION_]$clangFullVersion"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_OVERLAY_ARGS_]$vcpkgOverlayArgs"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_VCPKG_MANIFEST_FILE_]$vcpkgManifestFile"
              echo "##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_VCPKG_ARGS_]$cmakeVcpkgArgs"
            displayName: Set environment variables

          - pwsh: |
              if ('$(System.Debug)' -eq 'True') {
                  Get-ChildItem env: | Format-List
                  if ('${{ or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}' -eq 'True') {
                      Get-ChildItem -Force -Recurse '$(Build.BinariesDirectory)/_CImakeshift_cache'
                  }
              }
              if ($IsWindows) {
                  $ninjaOS = 'win'
                  if ('$(CIMAKESHIFT_CUDA_COMPILER)' -and '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -ne 'None') {
                      $cudaVersion = '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -replace '_','.'
                      $cudaVersion_URL = @{
                          '11.0' = 'http://developer.download.nvidia.com/compute/cuda/11.0.2/network_installers/cuda_11.0.2_win10_network.exe'
                          '11.1' = 'http://developer.download.nvidia.com/compute/cuda/11.1.1/network_installers/cuda_11.1.1_win10_network.exe'
                          '11.2' = 'http://developer.download.nvidia.com/compute/cuda/11.2.1/network_installers/cuda_11.2.1_win10_network.exe'
                          '11.3' = 'https://developer.download.nvidia.com/compute/cuda/11.3.1/network_installers/cuda_11.3.1_win10_network.exe'
                          '11.4' = 'https://developer.download.nvidia.com/compute/cuda/11.4.2/network_installers/cuda_11.4.2_win10_network.exe'
                          '11.5' = 'https://developer.download.nvidia.com/compute/cuda/11.5.2/network_installers/cuda_11.5.2_windows_network.exe'
                          '11.6' = 'https://developer.download.nvidia.com/compute/cuda/11.6.2/network_installers/cuda_11.6.2_windows_network.exe'
                          '11.7' = 'https://developer.download.nvidia.com/compute/cuda/11.7.1/network_installers/cuda_11.7.1_windows_network.exe'
                          '11.8' = 'https://developer.download.nvidia.com/compute/cuda/11.8.0/network_installers/cuda_11.8.0_windows_network.exe'
                          '12.0' = 'https://developer.download.nvidia.com/compute/cuda/12.0.1/network_installers/cuda_12.0.1_windows_network.exe'
                          '12.1' = 'https://developer.download.nvidia.com/compute/cuda/12.1.0/network_installers/cuda_12.1.0_windows_network.exe'
                      }
                      Invoke-WebRequest $cudaVersion_URL[$cudaVersion] -OutFile "$HOME/cuda_installer_network.exe"
                      Write-Host '[CImakeshift] Installing CUDA packages $(CIMAKESHIFT_CUDA_PACKAGES)'
                      Start-Process -Wait "$HOME/cuda_installer_network.exe" (@('-s') + ('$(CIMAKESHIFT_CUDA_PACKAGES)'.split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)))
                  }
              }
              elseif ($IsLinux) {
                  $ninjaOS = 'linux'
                  $packages = @()
                  $osVersionRaw = lsb_release -r -s
                  if ($osVersionRaw -eq '18.04') {
                      $osVersionName = 'bionic'
                  }
                  elseif ($osVersionRaw -eq '20.04') {
                      $osVersionName = 'focal'
                  }
                  elseif ($osVersionRaw -eq '22.04') {
                      $osVersionName = 'jammy'
                  }
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & sudo apt-add-repository ppa:ubuntu-toolchain-r/test
                      $packages += ('gcc-$(CIMAKESHIFT_CXX_COMPILER_VERSION)', 'g++-$(CIMAKESHIFT_CXX_COMPILER_VERSION)')
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'Clang') {
                      if ([int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -ge 5 -and [int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -lt 11) {
                          $clangRepository = 'llvm-toolchain-$(CIMAKESHIFT_CLANG_FULL_VERSION_)'
                          & sudo apt-add-repository "deb http://apt.llvm.org/$osVersionName/ $clangRepository main"
                      }
                      elseif ([int]'$(CIMAKESHIFT_CXX_COMPILER_VERSION)' -ge 11) {
                          $clangRepository = "llvm-toolchain-$osVersionName-$(CIMAKESHIFT_CLANG_FULL_VERSION_)"
                          & sudo apt-add-repository "deb http://apt.llvm.org/$osVersionName/ $clangRepository main"
                          & wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | & sudo apt-key add -
                      }
                      $packages += 'clang-$(CIMAKESHIFT_CLANG_FULL_VERSION_)'
                  }
                  if ('$(CIMAKESHIFT_CUDA_COMPILER)' -and '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -ne 'None') {
                      $cudaVersion = '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -replace '_','.'
                      $cudaVersionDash = '$(CIMAKESHIFT_CUDA_COMPILER_VERSION)' -replace '_','-'
                      $osVersionFlat = $osVersionRaw -replace [regex]::escape('.'),''
                      $ubuntuVersion = "ubuntu$osVersionFlat"
                      & sudo apt-key del 7fa2af80
                      & wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu$osVersionFlat/x86_64/cuda-keyring_1.0-1_all.deb
                      & sudo dpkg -i cuda-keyring_1.0-1_all.deb
                      $packages += "cuda-toolkit-$cudaVersionDash $(CIMAKESHIFT_CUDA_PACKAGES)".split(' ', [System.StringSplitOptions]::RemoveEmptyEntries)
                  }
                  & sudo apt-get update
                  Write-Host "[CImakeshift] Installing packages $packages"
                  & sudo apt-get install $packages
                  #& ln -s /usr/bin/cmake $HOME/bin/cmake
                  #& ln -s /usr/bin/ctest $HOME/bin/ctest
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & ln -s $(Get-Command $env:CC).Path $HOME/bin/gcc
                      & ln -s $(Get-Command $env:CXX).Path $HOME/bin/g++
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'Clang') {
                      & ln -s $(Get-Command $env:CC).Path $HOME/bin/clang
                      & ln -s $(Get-Command $env:CXX).Path $HOME/bin/clang++
                  }
              }
              elseif ($IsMacOS) {
                  $osVersion = [version](sw_vers -productVersion)
                  $ninjaOS = 'mac'
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      & brew install gcc@$(CIMAKESHIFT_CXX_COMPILER_VERSION)
                  }
              }
              $ninjaVersion = '1.11.1'
              Invoke-WebRequest "https://github.com/ninja-build/ninja/releases/download/v${ninjaVersion}/ninja-$ninjaOS.zip" -OutFile "$HOME/ninja-$ninjaOS.zip"
              Expand-Archive -LiteralPath "$HOME/ninja-$ninjaOS.zip" -DestinationPath "$HOME/bin"
              if (-not $IsWindows) {
                  & chmod +x $HOME/bin/ninja
              }
            displayName: Install tools

          - ${{ if or(eq(parameters.vcpkgCache, 'true'), and(eq(parameters.vcpkgCache, ''), parameters.vcpkgRef)) }}:
            - task: Cache@2
              displayName: Cache dependencies
              inputs:
                key: '$(CIMAKESHIFT_VCPKG_MANIFEST_FILE_)$(CIMAKESHIFT_CACHE_KEY_)'
                path: '$(Build.BinariesDirectory)/_CImakeshift_cache'
                cacheHitVar: 'CIMAKESHIFT_DEPENDENCY_CACHE_HIT'

          - ${{ if and(parameters.vcpkgRef, parameters.vcpkgOverlayRepo, parameters.vcpkgOverlayRef) }}:
            - pwsh: |
                & git clone $(CIMAKESHIFT_VCPKG_OVERLAY_REPO) '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo'
                cd '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo'
                & git checkout --quiet --force $(CIMAKESHIFT_VCPKG_OVERLAY_REF)
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/ports'
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/overlay-repo/vcpkg/triplets'
                Remove-Item -Recurse -Force './.git'
              displayName: Clone Vcpkg overlay repository
              condition: ne(variables.CIMAKESHIFT_DEPENDENCY_CACHE_HIT, 'true')

          - ${{ if parameters.vcpkgRef }}:
            - pwsh: |
                New-Item -Type Directory -Force '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache'
                if ($IsWindows) {
                    if (Test-Path "$env:LOCALAPPDATA\vcpkg") {
                        Write-Host "vcpkg cache directory already exists for some reason..."
                        Get-ChildItem -Path "$env:LOCALAPPDATA\vcpkg" -Recurse
                        Remove-Item -Path "$env:LOCALAPPDATA\vcpkg" -Recurse -Force
                    }
                    New-Item -ItemType SymbolicLink -Path "$env:LOCALAPPDATA" -Name 'vcpkg' -Value '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache'
                }
                else {
                    if (Test-Path "$env:HOME/.cache/vcpkg") {
                        Write-Host "vcpkg cache directory already exists for some reason..."
                        Get-ChildItem -Path "$env:HOME/.cache/vcpkg" -Recurse
                        Remove-Item -Path "$env:HOME/.cache/vcpkg" -Recurse -Force
                    }
                    New-Item -Type Directory -Force "$env:HOME/.cache"
                    New-Item -ItemType SymbolicLink -Path "$env:HOME/.cache" -Name 'vcpkg' -Value '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg_cache'
                }
                if ('$(CIMAKESHIFT_DEPENDENCY_CACHE_HIT)' -ne 'True') {
                    & git clone $(CIMAKESHIFT_VCPKG_REPO) '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                    cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                    & git checkout --quiet --force $(CIMAKESHIFT_VCPKG_REF)
                    if ($IsWindows) {
                        & ./bootstrap-vcpkg.bat
                    }
                    else {  # Linux or MacOS
                        $env:CC = ''
                        $env:CXX = ''
                        & chmod +x ./bootstrap-vcpkg.sh
                        & ./bootstrap-vcpkg.sh
                    }
                    Remove-Item -Recurse -Force './.git'
                }
              displayName: Set up Vcpkg

          - pwsh: |
              if ('$(System.Debug)' -eq 'True') {
                  Get-ChildItem env: | Format-List # for debugging
              }
              if ($IsMacOS) {
                  if ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'GCC') {
                      echo "##vso[task.setvariable variable=CXXFLAGS]$env:CXXFLAGS_OLD"
                      echo '##vso[task.setvariable variable=CC]gcc-$(CIMAKESHIFT_CXX_COMPILER_VERSION)'
                      echo '##vso[task.setvariable variable=CXX]g++-$(CIMAKESHIFT_CXX_COMPILER_VERSION)'
                  }
                  elseif ('$(CIMAKESHIFT_CXX_COMPILER)' -eq 'AppleClang') {
                      $appleClangVersion_xcodeVersion = @{
                          '11_0_3' = '11.7'    # also 11.4, 11.4.1, 11.5, 11.6
                          '12'     = '12.4'    # also 12.0, 12.1, 12.2, 12.3
                          '12_0'   = '12.4'
                          '12_0_0' = '12.4'
                          '12_0_5' = '12.5.1'  # also 12.5
                          '13'     = '13.2.1'
                          '13_0'   = '13.2.1'
                          '13_0_0' = '13.2.1'
                          '13_1_6' = '13.4.1'
                          '14'     = '14.2'
                          '14_0'   = '14.2'
                          '14_0_0' = '14.2'
                          '14_0_3' = '14.3'
                      }
                      $xcodeVersion = $appleClangVersion_xcodeVersion['$(CIMAKESHIFT_CXX_COMPILER_VERSION)']
                      & sudo xcode-select -s /Applications/Xcode_$xcodeVersion.app/Contents/Developer
                      echo '##vso[task.setvariable variable=CC]clang'
                      echo '##vso[task.setvariable variable=CXX]clang++'
                  }
              }
            displayName: Set environment variables

          - ${{ if parameters.vcpkgRef }}:
            - pwsh: |
                cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                if ($env:CIMAKESHIFT_VCPKG_PACKAGES) {
                    & ./vcpkg $(CIMAKESHIFT_VCPKG_OVERLAY_ARGS_) --triplet $(VCPKG_TRIPLET) $(CIMAKESHIFT_VCPKG_ARGS) install $(CIMAKESHIFT_VCPKG_PACKAGES)
                }
                if (Test-Path "$env:CIMAKESHIFT_CMAKE_SOURCE_DIR/vcpkg.json") {
                    # Vcpkg manifest mode
                    cd $env:CIMAKESHIFT_CMAKE_SOURCE_DIR
                    & '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg/vcpkg' $(CIMAKESHIFT_VCPKG_OVERLAY_ARGS_) --triplet $(VCPKG_TRIPLET) $(CIMAKESHIFT_VCPKG_ARGS) '--feature-flags=manifests' install
                    cd '$(Build.BinariesDirectory)/_CImakeshift_cache/vcpkg'
                }
                Remove-Item -Recurse -Force './buildtrees' -ErrorAction Ignore
                Remove-Item -Recurse -Force './downloads' -ErrorAction Ignore
                Remove-Item -Recurse -Force './packages' -ErrorAction Ignore
              displayName: Install Vcpkg packages
              condition: ne(variables.CIMAKESHIFT_DEPENDENCY_CACHE_HIT, 'true')

          - ${{ each step in parameters.postSetupSteps }}:
            - ${{ each pair in step }}:
                ${{ pair.key }}: ${{ pair.value }}
          - ${{ if parameters.targetPostSetupSteps }}:
            - ${{ each step in parameters.targetPostSetupSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}

          - ${{ each config in parameters.cmakeBuildConfigurations }}:
            - ${{ if coalesce(parameters.preBuildSteps, parameters.targetPreBuildSteps, parameters.postBuildSteps, parameters.targetPostBuildSteps) }}:
              - pwsh: |
                  echo '##vso[task.setvariable variable=CIMAKESHIFT_CMAKE_BUILD_CONFIGURATION]${{ config }}'
                displayName: Set environment variables for build configuration

            - ${{ each step in parameters.preBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if parameters.targetPreBuildSteps }}:
              - ${{ each step in parameters.targetPreBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

            - ${{ if eq(parameters.cmakeConfig, 'true') }}:
              - pwsh: |
                  New-Item -Type Directory -Force '$(Build.BinariesDirectory)/build/${{ config }}'
                  cd '$(Build.BinariesDirectory)/build/${{ config }}'
                  $vcpkgArgs = $env:CIMAKESHIFT_CMAKE_VCPKG_ARGS_ -split ' '
                  $args = $env:CIMAKESHIFT_CMAKE_CONFIG_ARGS -split ' '
                  & cmake -G $env:CIMAKESHIFT_CMAKE_GENERATOR -DCMAKE_BUILD_TYPE=${{ config }} $vcpkgArgs $env:CIMAKESHIFT_CMAKE_SOURCE_DIR $args
                displayName: 'Configure ${{ config }}'

            - ${{ if eq(parameters.cmakeBuild, 'true') }}:
              - pwsh: |
                  $args = $env:CIMAKESHIFT_CMAKE_BUILD_ARGS -split ' '
                  & cmake --build '$(Build.BinariesDirectory)/build/${{ config }}' --parallel --verbose --config ${{ config }} $args
                displayName: 'Build ${{ config }}'

            - ${{ if eq(parameters.cmakeTest, 'true') }}:
              - pwsh: |
                  cd '$(Build.BinariesDirectory)/build/${{ config }}'
                  $args = $env:CIMAKESHIFT_CMAKE_TEST_ARGS -split ' '
                  & ctest --verbose --output-on-failure --test-action Test --build-config ${{ config }} $args
                  if (-not $?) {
                      if (Test-Path 'Testing/Temporary') {
                          foreach ($file in Get-ChildItem "Testing/Temporary/MemoryChecker.*.log") {
                              Get-Content $file
                          }
                      }
                      exit 1
                  }
                displayName: 'Run tests for ${{ config }}'

            - ${{ each step in parameters.postBuildSteps }}:
              - ${{ each pair in step }}:
                  ${{ pair.key }}: ${{ pair.value }}
            - ${{ if parameters.targetPostBuildSteps }}:
              - ${{ each step in parameters.targetPostBuildSteps }}:
                - ${{ each pair in step }}:
                    ${{ pair.key }}: ${{ pair.value }}

          - ${{ if eq(parameters.cmakeTest, 'true') }}:
            - task: PublishTestResults@2
              displayName: Publish test results
              inputs:
                testResultsFormat: 'cTest'
                testResultsFiles: '$(Build.BinariesDirectory)/build/*/Testing/*/Test.xml'
                testRunTitle: '$(Agent.JobName)'
